/*
 * Copyright (c) 2008, Piccolo2D project, http://piccolo2d.org
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of conditions
 * and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions
 * and the following disclaimer in the documentation and/or other materials provided with the
 * distribution.
 *
 * None of the name of the Piccolo2D project, the University of Maryland, or the names of its contributors
 * may be used to endorse or promote products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.piccolo2d.svg;

import java.awt.geom.AffineTransform;
import java.text.ParseException;

import org.piccolo2d.svg.util.RagelParser;

/** <a href="http://research.cs.queensu.ca/~thurston/ragel/">Ragel</a> parser 
 * for <a href="http://www.w3.org/TR/SVG11/coords.html#TransformAttribute">transform attribute</a> - This file is auto-generated by rl2java.sh.
 * <p>
 * DO NOT EDIT MANUALLY!!!
 * </p>
 */
class TrafoParser implements RagelParser {
%%{

	machine trafo;

	#######################################################
	## Define the actions
	#######################################################

	action CLEAR {
		two = false;
		argc = 0;
	}

	action TWO {
		two = true;
	}

	action BUF {
		buf.append(data[p]);
	}

	action NUMBER {
		argv[argc++] = Double.parseDouble(buf.toString());
		buf.setLength(0);
	}

	action SKEW_X {
		if(true)
			throw new UnsupportedOperationException("Not implemented yet.");
	}

	action SKEW_Y {
		if(true)
			throw new UnsupportedOperationException("Not implemented yet.");
	}

	action ROTATE {
		argv[0] *= Math.PI / 180;
		if(!two) 
			t.rotate(argv[0]);
		else
			t.rotate(argv[0], argv[1], argv[2]);
	}

	action SCALE {
		if(!two)
			argv[1] = argv[0];
		t.scale(argv[0], argv[1]);
	}

	action TRANSLATE {
		if(!two)
			argv[1] = argv[0];
		t.translate(argv[0], argv[1]);
	}

	action MATRIX {
		t.preConcatenate(new AffineTransform(argv));
	}

	#######################################################
	## Define the grammar
	#######################################################

	wsp = space;
	digit_sequence = digit+;
	sign = "+" | "-";
	exponent = ( "e" | "E" ) sign? digit_sequence;
	fractional_constant = (digit_sequence? "." digit_sequence) | (digit_sequence ".");
	floating_point_constant = (fractional_constant exponent?) | (digit_sequence exponent);
	integer_constant = digit_sequence;
	comma = ",";
	comma_wsp = (wsp+ comma? wsp*) | (comma wsp*);
	number = (sign? @BUF (integer_constant | floating_point_constant)) @BUF %NUMBER;
	
	skewY = "skewY" wsp* "(" wsp* number wsp* ")" >CLEAR %SKEW_Y;
	skewX = "skewX" wsp* "(" wsp* number wsp* ")" >CLEAR %SKEW_X;
	rotate = ("rotate" wsp* "(" wsp* number ( comma_wsp number %TWO comma_wsp number )? wsp* ")") >CLEAR %ROTATE;
	scale = ("scale" wsp* "(" wsp* number ( comma_wsp number %TWO )? wsp* ")") >CLEAR %SCALE;
	translate = ("translate" wsp* "(" wsp* number ( comma_wsp number %TWO )? wsp* ")") >CLEAR %TRANSLATE;
	matrix = 
		"matrix" wsp* "(" wsp*
			number comma_wsp
			number comma_wsp
			number comma_wsp
			number comma_wsp
			number comma_wsp
			number wsp* ")" >CLEAR %MATRIX;
	transform =
	    matrix
	    | translate
	    | scale
	    | rotate
	    | skewX
	    | skewY;
	transforms =
		transform (comma_wsp+ transform)*;
	
	main := wsp* transforms? wsp*;
}%%

%% write data;

	final AffineTransform parse(final CharSequence data, final AffineTransform t) throws ParseException {
		return parse(data == null ? null : data.toString().toCharArray(), t);
	}

	final AffineTransform parse(final char[] data, AffineTransform t) throws ParseException {
		if(t == null)
			t = new AffineTransform();
		if(data == null)
			return t;
		// high-level buffers
		boolean two = false;
		final StringBuilder buf = new StringBuilder();
		final double[] argv = new double[6];
		int argc = 0;
		
		// ragel variables (low level)
		final int pe = data.length;
		final int eof = pe;
		int cs, p = 0;
		int top;

		%% write init;
		%% write exec;

		if ( cs < trafo_first_final )
			throw new ParseException(new String(data), p);
        return t;
	}
}
