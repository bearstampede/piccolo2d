// line 1 "src/main/ragel/PathParser.rl"
/*
 * Copyright (c) 2008, Piccolo2D project, http://piccolo2d.org
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of conditions
 * and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions
 * and the following disclaimer in the documentation and/or other materials provided with the
 * distribution.
 *
 * None of the name of the Piccolo2D project, the University of Maryland, or the names of its contributors
 * may be used to endorse or promote products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.piccolo2d.svg;

import java.awt.geom.GeneralPath;
import java.text.ParseException;

/** <a href="http://research.cs.queensu.ca/~thurston/ragel/">Ragel parser 
 * for <a href="http://www.w3.org/TR/SVG11/paths.html#PathDataBNF">paths</a> - This file is auto-generated by rl2java.sh.
 * <p>
 * DO NOT EDIT MANUALLY!!!
 * </p>
 * See also https://lib2geom.svn.sourceforge.net/svnroot/lib2geom/lib2geom/trunk/src/2geom/svg-path-parser.rl
 */
class PathParser implements RagelParser {
// line 264 "src/main/ragel/PathParser.rl"



// line 47 "src/main/java/org/piccolo2d/svg/PathParser.java"
private static byte[] init__path_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,   15,    2,    1,    0,    2,    1,    6,    2,    1,    7,
	    2,    1,    8,    2,    1,    9,    2,    1,   10,    2,    1,   11,
	    2,    1,   12,    2,    1,   13,    2,    1,   14,    2,    4,    0,
	    2,    5,    0,    3,    1,    6,    0,    3,    1,    7,    0,    3,
	    1,    8,    0,    3,    1,    9,    0,    3,    1,   10,    0,    3,
	    1,   11,    0,    3,    1,   12,    0,    3,    1,   13,    0,    3,
	    1,   14,    0
	};
}

private static final byte _path_actions[] = init__path_actions_0();


private static short[] init__path_key_offsets_0()
{
	return new short [] {
	    0,    0,    9,   18,   21,   23,   35,   45,   48,   50,   53,   55,
	   67,   77,   80,   82,   91,  103,  112,  119,  126,  128,  138,  146,
	  153,  155,  167,  177,  180,  182,  191,  198,  204,  209,  216,  222,
	  227,  237,  240,  242,  254,  264,  267,  269,  279,  283,  285,  293,
	  302,  311,  314,  316,  328,  338,  341,  343,  355,  365,  368,  370,
	  382,  392,  395,  397,  409,  419,  422,  424,  436,  446,  449,  451,
	  463,  472,  484,  493,  505,  514,  526,  535,  547,  556,  560,  562,
	  571,  580,  583,  585,  589,  591,  600,  609,  618,  621,  623,  635,
	  645,  648,  650,  662,  672,  675,  677,  689,  699,  702,  704,  716,
	  725,  737,  746,  758,  767,  771,  773,  782,  791,  794,  796,  808,
	  818,  821,  823,  835,  845,  848,  850,  862,  872,  875,  877,  889,
	  898,  910,  919,  931,  940,  944,  946,  955,  964,  967,  969,  981,
	  991,  994,  996, 1008, 1017, 1021, 1023, 1032, 1041, 1044, 1046, 1050,
	 1052, 1059, 1068, 1077, 1086, 1095, 1107, 1116, 1120, 1122, 1131, 1140,
	 1149, 1158, 1162, 1164, 1174, 1178, 1180, 1190, 1194, 1196, 1206, 1210,
	 1212, 1222, 1226, 1228, 1238, 1242, 1244, 1254, 1258, 1260, 1270, 1274,
	 1276, 1286, 1290, 1292, 1302, 1306, 1308, 1318, 1322, 1324, 1334, 1338,
	 1340, 1350, 1354, 1356, 1366, 1370, 1372, 1381, 1385, 1387, 1397, 1409,
	 1418, 1423, 1428, 1432, 1434, 1441, 1451, 1460, 1464, 1466, 1476, 1488,
	 1492, 1494, 1498, 1500, 1510, 1516, 1548, 1578, 1610, 1642, 1672, 1700,
	 1732, 1762, 1794, 1824, 1856, 1886, 1918, 1948, 1980, 2010, 2042, 2072,
	 2104, 2134, 2166, 2196, 2228, 2258, 2290, 2320, 2352, 2382, 2414, 2444,
	 2468, 2492, 2524, 2554, 2582, 2612
	};
}

private static final short _path_key_offsets[] = init__path_key_offsets_0();


private static char[] init__path_trans_keys_0()
{
	return new char [] {
	   13,   32,   43,   45,   46,    9,   10,   48,   57,   13,   32,   43,
	   45,   46,    9,   10,   48,   57,   46,   48,   57,   48,   57,   13,
	   32,   44,   46,   69,  101,    9,   10,   43,   45,   48,   57,   13,
	   32,   44,   46,    9,   10,   43,   45,   48,   57,   46,   48,   57,
	   48,   57,   46,   48,   57,   48,   57,   13,   32,   44,   46,   69,
	  101,    9,   10,   43,   45,   48,   57,   13,   32,   44,   46,    9,
	   10,   43,   45,   48,   57,   46,   48,   57,   48,   57,   13,   32,
	   43,   45,   46,    9,   10,   48,   57,   13,   32,   44,   46,   69,
	  101,    9,   10,   43,   45,   48,   57,   13,   32,   43,   45,   46,
	    9,   10,   48,   57,   13,   32,   46,    9,   10,   48,   57,   13,
	   32,   46,    9,   10,   48,   57,   48,   57,   13,   32,   44,   46,
	   69,  101,    9,   10,   48,   57,   13,   32,   44,   46,    9,   10,
	   48,   57,   13,   32,   46,    9,   10,   48,   57,   48,   57,   13,
	   32,   44,   46,   69,  101,    9,   10,   43,   45,   48,   57,   13,
	   32,   44,   46,    9,   10,   43,   45,   48,   57,   46,   48,   57,
	   48,   57,   13,   32,   44,   69,  101,    9,   10,   48,   57,   13,
	   32,   44,   48,   49,    9,   10,   13,   32,   48,   49,    9,   10,
	   13,   32,   44,    9,   10,   13,   32,   44,   48,   49,    9,   10,
	   13,   32,   48,   49,    9,   10,   13,   32,   44,    9,   10,   13,
	   32,   44,   46,    9,   10,   43,   45,   48,   57,   46,   48,   57,
	   48,   57,   13,   32,   44,   46,   69,  101,    9,   10,   43,   45,
	   48,   57,   13,   32,   44,   46,    9,   10,   43,   45,   48,   57,
	   46,   48,   57,   48,   57,   13,   32,   44,   46,   69,  101,    9,
	   10,   48,   57,   43,   45,   48,   57,   48,   57,   13,   32,   44,
	   46,    9,   10,   48,   57,   13,   32,   43,   45,   46,    9,   10,
	   48,   57,   13,   32,   43,   45,   46,    9,   10,   48,   57,   46,
	   48,   57,   48,   57,   13,   32,   44,   46,   69,  101,    9,   10,
	   43,   45,   48,   57,   13,   32,   44,   46,    9,   10,   43,   45,
	   48,   57,   46,   48,   57,   48,   57,   13,   32,   44,   46,   69,
	  101,    9,   10,   43,   45,   48,   57,   13,   32,   44,   46,    9,
	   10,   43,   45,   48,   57,   46,   48,   57,   48,   57,   13,   32,
	   44,   46,   69,  101,    9,   10,   43,   45,   48,   57,   13,   32,
	   44,   46,    9,   10,   43,   45,   48,   57,   46,   48,   57,   48,
	   57,   13,   32,   44,   46,   69,  101,    9,   10,   43,   45,   48,
	   57,   13,   32,   44,   46,    9,   10,   43,   45,   48,   57,   46,
	   48,   57,   48,   57,   13,   32,   44,   46,   69,  101,    9,   10,
	   43,   45,   48,   57,   13,   32,   44,   46,    9,   10,   43,   45,
	   48,   57,   46,   48,   57,   48,   57,   13,   32,   44,   46,   69,
	  101,    9,   10,   43,   45,   48,   57,   13,   32,   43,   45,   46,
	    9,   10,   48,   57,   13,   32,   44,   46,   69,  101,    9,   10,
	   43,   45,   48,   57,   13,   32,   43,   45,   46,    9,   10,   48,
	   57,   13,   32,   44,   46,   69,  101,    9,   10,   43,   45,   48,
	   57,   13,   32,   43,   45,   46,    9,   10,   48,   57,   13,   32,
	   44,   46,   69,  101,    9,   10,   43,   45,   48,   57,   13,   32,
	   43,   45,   46,    9,   10,   48,   57,   13,   32,   44,   46,   69,
	  101,    9,   10,   43,   45,   48,   57,   13,   32,   43,   45,   46,
	    9,   10,   48,   57,   43,   45,   48,   57,   48,   57,   13,   32,
	   43,   45,   46,    9,   10,   48,   57,   13,   32,   43,   45,   46,
	    9,   10,   48,   57,   46,   48,   57,   48,   57,   43,   45,   48,
	   57,   48,   57,   13,   32,   43,   45,   46,    9,   10,   48,   57,
	   13,   32,   43,   45,   46,    9,   10,   48,   57,   13,   32,   43,
	   45,   46,    9,   10,   48,   57,   46,   48,   57,   48,   57,   13,
	   32,   44,   46,   69,  101,    9,   10,   43,   45,   48,   57,   13,
	   32,   44,   46,    9,   10,   43,   45,   48,   57,   46,   48,   57,
	   48,   57,   13,   32,   44,   46,   69,  101,    9,   10,   43,   45,
	   48,   57,   13,   32,   44,   46,    9,   10,   43,   45,   48,   57,
	   46,   48,   57,   48,   57,   13,   32,   44,   46,   69,  101,    9,
	   10,   43,   45,   48,   57,   13,   32,   44,   46,    9,   10,   43,
	   45,   48,   57,   46,   48,   57,   48,   57,   13,   32,   44,   46,
	   69,  101,    9,   10,   43,   45,   48,   57,   13,   32,   43,   45,
	   46,    9,   10,   48,   57,   13,   32,   44,   46,   69,  101,    9,
	   10,   43,   45,   48,   57,   13,   32,   43,   45,   46,    9,   10,
	   48,   57,   13,   32,   44,   46,   69,  101,    9,   10,   43,   45,
	   48,   57,   13,   32,   43,   45,   46,    9,   10,   48,   57,   43,
	   45,   48,   57,   48,   57,   13,   32,   43,   45,   46,    9,   10,
	   48,   57,   13,   32,   43,   45,   46,    9,   10,   48,   57,   46,
	   48,   57,   48,   57,   13,   32,   44,   46,   69,  101,    9,   10,
	   43,   45,   48,   57,   13,   32,   44,   46,    9,   10,   43,   45,
	   48,   57,   46,   48,   57,   48,   57,   13,   32,   44,   46,   69,
	  101,    9,   10,   43,   45,   48,   57,   13,   32,   44,   46,    9,
	   10,   43,   45,   48,   57,   46,   48,   57,   48,   57,   13,   32,
	   44,   46,   69,  101,    9,   10,   43,   45,   48,   57,   13,   32,
	   44,   46,    9,   10,   43,   45,   48,   57,   46,   48,   57,   48,
	   57,   13,   32,   44,   46,   69,  101,    9,   10,   43,   45,   48,
	   57,   13,   32,   43,   45,   46,    9,   10,   48,   57,   13,   32,
	   44,   46,   69,  101,    9,   10,   43,   45,   48,   57,   13,   32,
	   43,   45,   46,    9,   10,   48,   57,   13,   32,   44,   46,   69,
	  101,    9,   10,   43,   45,   48,   57,   13,   32,   43,   45,   46,
	    9,   10,   48,   57,   43,   45,   48,   57,   48,   57,   13,   32,
	   43,   45,   46,    9,   10,   48,   57,   13,   32,   43,   45,   46,
	    9,   10,   48,   57,   46,   48,   57,   48,   57,   13,   32,   44,
	   46,   69,  101,    9,   10,   43,   45,   48,   57,   13,   32,   44,
	   46,    9,   10,   43,   45,   48,   57,   46,   48,   57,   48,   57,
	   13,   32,   44,   46,   69,  101,    9,   10,   43,   45,   48,   57,
	   13,   32,   43,   45,   46,    9,   10,   48,   57,   43,   45,   48,
	   57,   48,   57,   13,   32,   43,   45,   46,    9,   10,   48,   57,
	   13,   32,   43,   45,   46,    9,   10,   48,   57,   46,   48,   57,
	   48,   57,   43,   45,   48,   57,   48,   57,   13,   32,   46,    9,
	   10,   48,   57,   13,   32,   43,   45,   46,    9,   10,   48,   57,
	   13,   32,   43,   45,   46,    9,   10,   48,   57,   13,   32,   43,
	   45,   46,    9,   10,   48,   57,   13,   32,   43,   45,   46,    9,
	   10,   48,   57,   13,   32,   44,   46,   69,  101,    9,   10,   43,
	   45,   48,   57,   13,   32,   43,   45,   46,    9,   10,   48,   57,
	   43,   45,   48,   57,   48,   57,   13,   32,   43,   45,   46,    9,
	   10,   48,   57,   13,   32,   43,   45,   46,    9,   10,   48,   57,
	   13,   32,   43,   45,   46,    9,   10,   48,   57,   13,   32,   43,
	   45,   46,    9,   10,   48,   57,   43,   45,   48,   57,   48,   57,
	   13,   32,   44,   46,    9,   10,   43,   45,   48,   57,   43,   45,
	   48,   57,   48,   57,   13,   32,   44,   46,    9,   10,   43,   45,
	   48,   57,   43,   45,   48,   57,   48,   57,   13,   32,   44,   46,
	    9,   10,   43,   45,   48,   57,   43,   45,   48,   57,   48,   57,
	   13,   32,   44,   46,    9,   10,   43,   45,   48,   57,   43,   45,
	   48,   57,   48,   57,   13,   32,   44,   46,    9,   10,   43,   45,
	   48,   57,   43,   45,   48,   57,   48,   57,   13,   32,   44,   46,
	    9,   10,   43,   45,   48,   57,   43,   45,   48,   57,   48,   57,
	   13,   32,   44,   46,    9,   10,   43,   45,   48,   57,   43,   45,
	   48,   57,   48,   57,   13,   32,   44,   46,    9,   10,   43,   45,
	   48,   57,   43,   45,   48,   57,   48,   57,   13,   32,   44,   46,
	    9,   10,   43,   45,   48,   57,   43,   45,   48,   57,   48,   57,
	   13,   32,   44,   46,    9,   10,   43,   45,   48,   57,   43,   45,
	   48,   57,   48,   57,   13,   32,   44,   46,    9,   10,   43,   45,
	   48,   57,   43,   45,   48,   57,   48,   57,   13,   32,   44,   46,
	    9,   10,   43,   45,   48,   57,   43,   45,   48,   57,   48,   57,
	   13,   32,   44,   46,    9,   10,   43,   45,   48,   57,   43,   45,
	   48,   57,   48,   57,   13,   32,   43,   45,   46,    9,   10,   48,
	   57,   43,   45,   48,   57,   48,   57,   13,   32,   44,   46,    9,
	   10,   43,   45,   48,   57,   13,   32,   44,   46,   69,  101,    9,
	   10,   43,   45,   48,   57,   13,   32,   43,   45,   46,    9,   10,
	   48,   57,   13,   32,   44,    9,   10,   13,   32,   44,    9,   10,
	   43,   45,   48,   57,   48,   57,   13,   32,   44,    9,   10,   48,
	   57,   13,   32,   44,   46,   69,  101,    9,   10,   48,   57,   13,
	   32,   43,   45,   46,    9,   10,   48,   57,   43,   45,   48,   57,
	   48,   57,   13,   32,   44,   46,    9,   10,   43,   45,   48,   57,
	   13,   32,   44,   46,   69,  101,    9,   10,   43,   45,   48,   57,
	   43,   45,   48,   57,   48,   57,   43,   45,   48,   57,   48,   57,
	   13,   32,   44,   46,    9,   10,   43,   45,   48,   57,   13,   32,
	   77,  109,    9,   10,   13,   32,   44,   46,   65,   67,   69,   72,
	   76,   77,   81,   83,   84,   86,   90,   97,   99,  101,  104,  108,
	  109,  113,  115,  116,  118,  122,    9,   10,   43,   45,   48,   57,
	   13,   32,   44,   46,   65,   67,   72,   76,   77,   81,   83,   84,
	   86,   90,   97,   99,  104,  108,  109,  113,  115,  116,  118,  122,
	    9,   10,   43,   45,   48,   57,   13,   32,   44,   46,   65,   67,
	   69,   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,  101,
	  104,  108,  109,  113,  115,  116,  118,  122,    9,   10,   43,   45,
	   48,   57,   13,   32,   44,   46,   65,   67,   69,   72,   76,   77,
	   81,   83,   84,   86,   90,   97,   99,  101,  104,  108,  109,  113,
	  115,  116,  118,  122,    9,   10,   43,   45,   48,   57,   13,   32,
	   44,   46,   65,   67,   69,   72,   76,   77,   81,   83,   84,   86,
	   90,   97,   99,  101,  104,  108,  109,  113,  115,  116,  118,  122,
	    9,   10,   48,   57,   13,   32,   44,   46,   65,   67,   72,   76,
	   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,  109,  113,
	  115,  116,  118,  122,    9,   10,   48,   57,   13,   32,   44,   46,
	   65,   67,   69,   72,   76,   77,   81,   83,   84,   86,   90,   97,
	   99,  101,  104,  108,  109,  113,  115,  116,  118,  122,    9,   10,
	   43,   45,   48,   57,   13,   32,   44,   46,   65,   67,   72,   76,
	   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,  109,  113,
	  115,  116,  118,  122,    9,   10,   43,   45,   48,   57,   13,   32,
	   44,   46,   65,   67,   69,   72,   76,   77,   81,   83,   84,   86,
	   90,   97,   99,  101,  104,  108,  109,  113,  115,  116,  118,  122,
	    9,   10,   43,   45,   48,   57,   13,   32,   44,   46,   65,   67,
	   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,
	  109,  113,  115,  116,  118,  122,    9,   10,   43,   45,   48,   57,
	   13,   32,   44,   46,   65,   67,   69,   72,   76,   77,   81,   83,
	   84,   86,   90,   97,   99,  101,  104,  108,  109,  113,  115,  116,
	  118,  122,    9,   10,   43,   45,   48,   57,   13,   32,   44,   46,
	   65,   67,   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,
	  104,  108,  109,  113,  115,  116,  118,  122,    9,   10,   43,   45,
	   48,   57,   13,   32,   44,   46,   65,   67,   69,   72,   76,   77,
	   81,   83,   84,   86,   90,   97,   99,  101,  104,  108,  109,  113,
	  115,  116,  118,  122,    9,   10,   43,   45,   48,   57,   13,   32,
	   44,   46,   65,   67,   72,   76,   77,   81,   83,   84,   86,   90,
	   97,   99,  104,  108,  109,  113,  115,  116,  118,  122,    9,   10,
	   43,   45,   48,   57,   13,   32,   44,   46,   65,   67,   69,   72,
	   76,   77,   81,   83,   84,   86,   90,   97,   99,  101,  104,  108,
	  109,  113,  115,  116,  118,  122,    9,   10,   43,   45,   48,   57,
	   13,   32,   44,   46,   65,   67,   72,   76,   77,   81,   83,   84,
	   86,   90,   97,   99,  104,  108,  109,  113,  115,  116,  118,  122,
	    9,   10,   43,   45,   48,   57,   13,   32,   44,   46,   65,   67,
	   69,   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,  101,
	  104,  108,  109,  113,  115,  116,  118,  122,    9,   10,   43,   45,
	   48,   57,   13,   32,   44,   46,   65,   67,   72,   76,   77,   81,
	   83,   84,   86,   90,   97,   99,  104,  108,  109,  113,  115,  116,
	  118,  122,    9,   10,   43,   45,   48,   57,   13,   32,   44,   46,
	   65,   67,   69,   72,   76,   77,   81,   83,   84,   86,   90,   97,
	   99,  101,  104,  108,  109,  113,  115,  116,  118,  122,    9,   10,
	   43,   45,   48,   57,   13,   32,   44,   46,   65,   67,   72,   76,
	   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,  109,  113,
	  115,  116,  118,  122,    9,   10,   43,   45,   48,   57,   13,   32,
	   44,   46,   65,   67,   69,   72,   76,   77,   81,   83,   84,   86,
	   90,   97,   99,  101,  104,  108,  109,  113,  115,  116,  118,  122,
	    9,   10,   43,   45,   48,   57,   13,   32,   44,   46,   65,   67,
	   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,
	  109,  113,  115,  116,  118,  122,    9,   10,   43,   45,   48,   57,
	   13,   32,   44,   46,   65,   67,   69,   72,   76,   77,   81,   83,
	   84,   86,   90,   97,   99,  101,  104,  108,  109,  113,  115,  116,
	  118,  122,    9,   10,   43,   45,   48,   57,   13,   32,   44,   46,
	   65,   67,   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,
	  104,  108,  109,  113,  115,  116,  118,  122,    9,   10,   43,   45,
	   48,   57,   13,   32,   44,   46,   65,   67,   69,   72,   76,   77,
	   81,   83,   84,   86,   90,   97,   99,  101,  104,  108,  109,  113,
	  115,  116,  118,  122,    9,   10,   43,   45,   48,   57,   13,   32,
	   44,   46,   65,   67,   72,   76,   77,   81,   83,   84,   86,   90,
	   97,   99,  104,  108,  109,  113,  115,  116,  118,  122,    9,   10,
	   43,   45,   48,   57,   13,   32,   44,   46,   65,   67,   69,   72,
	   76,   77,   81,   83,   84,   86,   90,   97,   99,  101,  104,  108,
	  109,  113,  115,  116,  118,  122,    9,   10,   43,   45,   48,   57,
	   13,   32,   44,   46,   65,   67,   72,   76,   77,   81,   83,   84,
	   86,   90,   97,   99,  104,  108,  109,  113,  115,  116,  118,  122,
	    9,   10,   43,   45,   48,   57,   13,   32,   44,   46,   65,   67,
	   69,   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,  101,
	  104,  108,  109,  113,  115,  116,  118,  122,    9,   10,   43,   45,
	   48,   57,   13,   32,   44,   46,   65,   67,   72,   76,   77,   81,
	   83,   84,   86,   90,   97,   99,  104,  108,  109,  113,  115,  116,
	  118,  122,    9,   10,   43,   45,   48,   57,   13,   32,   65,   67,
	   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,
	  109,  113,  115,  116,  118,  122,    9,   10,   13,   32,   65,   67,
	   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,
	  109,  113,  115,  116,  118,  122,    9,   10,   13,   32,   44,   46,
	   65,   67,   69,   72,   76,   77,   81,   83,   84,   86,   90,   97,
	   99,  101,  104,  108,  109,  113,  115,  116,  118,  122,    9,   10,
	   43,   45,   48,   57,   13,   32,   44,   46,   65,   67,   72,   76,
	   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,  109,  113,
	  115,  116,  118,  122,    9,   10,   43,   45,   48,   57,   13,   32,
	   44,   46,   65,   67,   72,   76,   77,   81,   83,   84,   86,   90,
	   97,   99,  104,  108,  109,  113,  115,  116,  118,  122,    9,   10,
	   48,   57,   13,   32,   44,   46,   65,   67,   69,   72,   76,   77,
	   81,   83,   84,   86,   90,   97,   99,  101,  104,  108,  109,  113,
	  115,  116,  118,  122,    9,   10,   48,   57,   13,   32,   44,   46,
	   65,   67,   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,
	  104,  108,  109,  113,  115,  116,  118,  122,    9,   10,   43,   45,
	   48,   57,    0
	};
}

private static final char _path_trans_keys[] = init__path_trans_keys_0();


private static byte[] init__path_single_lengths_0()
{
	return new byte [] {
	    0,    5,    5,    1,    0,    6,    4,    1,    0,    1,    0,    6,
	    4,    1,    0,    5,    6,    5,    3,    3,    0,    6,    4,    3,
	    0,    6,    4,    1,    0,    5,    5,    4,    3,    5,    4,    3,
	    4,    1,    0,    6,    4,    1,    0,    6,    2,    0,    4,    5,
	    5,    1,    0,    6,    4,    1,    0,    6,    4,    1,    0,    6,
	    4,    1,    0,    6,    4,    1,    0,    6,    4,    1,    0,    6,
	    5,    6,    5,    6,    5,    6,    5,    6,    5,    2,    0,    5,
	    5,    1,    0,    2,    0,    5,    5,    5,    1,    0,    6,    4,
	    1,    0,    6,    4,    1,    0,    6,    4,    1,    0,    6,    5,
	    6,    5,    6,    5,    2,    0,    5,    5,    1,    0,    6,    4,
	    1,    0,    6,    4,    1,    0,    6,    4,    1,    0,    6,    5,
	    6,    5,    6,    5,    2,    0,    5,    5,    1,    0,    6,    4,
	    1,    0,    6,    5,    2,    0,    5,    5,    1,    0,    2,    0,
	    3,    5,    5,    5,    5,    6,    5,    2,    0,    5,    5,    5,
	    5,    2,    0,    4,    2,    0,    4,    2,    0,    4,    2,    0,
	    4,    2,    0,    4,    2,    0,    4,    2,    0,    4,    2,    0,
	    4,    2,    0,    4,    2,    0,    4,    2,    0,    4,    2,    0,
	    4,    2,    0,    4,    2,    0,    5,    2,    0,    4,    6,    5,
	    3,    3,    2,    0,    3,    6,    5,    2,    0,    4,    6,    2,
	    0,    2,    0,    4,    4,   26,   24,   26,   26,   26,   24,   26,
	   24,   26,   24,   26,   24,   26,   24,   26,   24,   26,   24,   26,
	   24,   26,   24,   26,   24,   26,   24,   26,   24,   26,   24,   22,
	   22,   26,   24,   24,   26,   24
	};
}

private static final byte _path_single_lengths[] = init__path_single_lengths_0();


private static byte[] init__path_range_lengths_0()
{
	return new byte [] {
	    0,    2,    2,    1,    1,    3,    3,    1,    1,    1,    1,    3,
	    3,    1,    1,    2,    3,    2,    2,    2,    1,    2,    2,    2,
	    1,    3,    3,    1,    1,    2,    1,    1,    1,    1,    1,    1,
	    3,    1,    1,    3,    3,    1,    1,    2,    1,    1,    2,    2,
	    2,    1,    1,    3,    3,    1,    1,    3,    3,    1,    1,    3,
	    3,    1,    1,    3,    3,    1,    1,    3,    3,    1,    1,    3,
	    2,    3,    2,    3,    2,    3,    2,    3,    2,    1,    1,    2,
	    2,    1,    1,    1,    1,    2,    2,    2,    1,    1,    3,    3,
	    1,    1,    3,    3,    1,    1,    3,    3,    1,    1,    3,    2,
	    3,    2,    3,    2,    1,    1,    2,    2,    1,    1,    3,    3,
	    1,    1,    3,    3,    1,    1,    3,    3,    1,    1,    3,    2,
	    3,    2,    3,    2,    1,    1,    2,    2,    1,    1,    3,    3,
	    1,    1,    3,    2,    1,    1,    2,    2,    1,    1,    1,    1,
	    2,    2,    2,    2,    2,    3,    2,    1,    1,    2,    2,    2,
	    2,    1,    1,    3,    1,    1,    3,    1,    1,    3,    1,    1,
	    3,    1,    1,    3,    1,    1,    3,    1,    1,    3,    1,    1,
	    3,    1,    1,    3,    1,    1,    3,    1,    1,    3,    1,    1,
	    3,    1,    1,    3,    1,    1,    2,    1,    1,    3,    3,    2,
	    1,    1,    1,    1,    2,    2,    2,    1,    1,    3,    3,    1,
	    1,    1,    1,    3,    1,    3,    3,    3,    3,    2,    2,    3,
	    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
	    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
	    1,    3,    3,    2,    2,    3
	};
}

private static final byte _path_range_lengths[] = init__path_range_lengths_0();


private static short[] init__path_index_offsets_0()
{
	return new short [] {
	    0,    0,    8,   16,   19,   21,   31,   39,   42,   44,   47,   49,
	   59,   67,   70,   72,   80,   90,   98,  104,  110,  112,  121,  128,
	  134,  136,  146,  154,  157,  159,  167,  174,  180,  185,  192,  198,
	  203,  211,  214,  216,  226,  234,  237,  239,  248,  252,  254,  261,
	  269,  277,  280,  282,  292,  300,  303,  305,  315,  323,  326,  328,
	  338,  346,  349,  351,  361,  369,  372,  374,  384,  392,  395,  397,
	  407,  415,  425,  433,  443,  451,  461,  469,  479,  487,  491,  493,
	  501,  509,  512,  514,  518,  520,  528,  536,  544,  547,  549,  559,
	  567,  570,  572,  582,  590,  593,  595,  605,  613,  616,  618,  628,
	  636,  646,  654,  664,  672,  676,  678,  686,  694,  697,  699,  709,
	  717,  720,  722,  732,  740,  743,  745,  755,  763,  766,  768,  778,
	  786,  796,  804,  814,  822,  826,  828,  836,  844,  847,  849,  859,
	  867,  870,  872,  882,  890,  894,  896,  904,  912,  915,  917,  921,
	  923,  929,  937,  945,  953,  961,  971,  979,  983,  985,  993, 1001,
	 1009, 1017, 1021, 1023, 1031, 1035, 1037, 1045, 1049, 1051, 1059, 1063,
	 1065, 1073, 1077, 1079, 1087, 1091, 1093, 1101, 1105, 1107, 1115, 1119,
	 1121, 1129, 1133, 1135, 1143, 1147, 1149, 1157, 1161, 1163, 1171, 1175,
	 1177, 1185, 1189, 1191, 1199, 1203, 1205, 1213, 1217, 1219, 1227, 1237,
	 1245, 1250, 1255, 1259, 1261, 1267, 1276, 1284, 1288, 1290, 1298, 1308,
	 1312, 1314, 1318, 1320, 1328, 1334, 1364, 1392, 1422, 1452, 1481, 1508,
	 1538, 1566, 1596, 1624, 1654, 1682, 1712, 1740, 1770, 1798, 1828, 1856,
	 1886, 1914, 1944, 1972, 2002, 2030, 2060, 2088, 2118, 2146, 2176, 2204,
	 2228, 2252, 2282, 2310, 2337, 2366
	};
}

private static final short _path_index_offsets[] = init__path_index_offsets_0();


private static short[] init__path_indicies_0()
{
	return new short [] {
	    0,    0,    2,    2,    3,    0,    4,    1,    5,    5,    6,    6,
	    7,    5,    8,    1,    9,   10,    1,   11,    1,   12,   12,   14,
	   15,   16,   16,   12,   13,   11,    1,   17,   17,   19,   20,   17,
	   18,   21,    1,   22,   23,    1,   24,    1,   25,   26,    1,   27,
	    1,   28,   28,   30,   31,   32,   32,   28,   29,   27,    1,   33,
	   33,   35,   36,   33,   34,   37,    1,   38,   39,    1,   40,    1,
	   41,   41,   42,   42,   43,   41,   44,    1,   28,   28,   30,   27,
	   32,   32,   28,   29,   26,    1,   35,   35,   34,   34,   36,   35,
	   37,    1,   45,   45,   46,   45,   47,    1,   48,   48,   49,   48,
	   50,    1,   51,    1,   52,   52,   53,   54,   55,   55,   52,   51,
	    1,   56,   56,   57,   58,   56,   59,    1,   57,   57,   58,   57,
	   59,    1,   60,    1,   61,   61,   63,   64,   65,   65,   61,   62,
	   60,    1,   66,   66,   68,   69,   66,   67,   70,    1,   71,   72,
	    1,   73,    1,   74,   74,   75,   76,   76,   74,   73,    1,   77,
	   77,   78,   79,   80,   77,    1,   78,   78,   79,   80,   78,    1,
	   81,   81,   82,   81,    1,   83,   83,   84,   85,   86,   83,    1,
	   84,   84,   85,   86,   84,    1,   87,   87,   88,   87,    1,   89,
	   89,   91,   92,   89,   90,   93,    1,   94,   95,    1,   96,    1,
	   97,   97,   99,  100,  101,  101,   97,   98,   96,    1,  102,  102,
	  104,  105,  102,  103,  106,    1,  107,  108,    1,  109,    1,   52,
	   52,   53,   51,   55,   55,   52,  110,    1,  111,  111,  112,    1,
	  112,    1,   52,   52,   53,   54,   52,  112,    1,  113,  113,  114,
	  114,  115,  113,  116,    1,  117,  117,  118,  118,  119,  117,  120,
	    1,  121,  122,    1,  123,    1,  124,  124,  126,  127,  128,  128,
	  124,  125,  123,    1,  129,  129,  131,  132,  129,  130,  133,    1,
	  134,  135,    1,  136,    1,  137,  137,  139,  140,  141,  141,  137,
	  138,  136,    1,  142,  142,  144,  145,  142,  143,  146,    1,  147,
	  148,    1,  149,    1,  150,  150,  152,  153,  154,  154,  150,  151,
	  149,    1,  155,  155,  157,  158,  155,  156,  159,    1,  160,  161,
	    1,  162,    1,  163,  163,  165,  166,  167,  167,  163,  164,  162,
	    1,  168,  168,  170,  171,  168,  169,  172,    1,  173,  174,    1,
	  175,    1,  176,  176,  178,  179,  180,  180,  176,  177,  175,    1,
	  181,  181,  183,  184,  181,  182,  185,    1,  186,  187,    1,  188,
	    1,  124,  124,  126,  123,  128,  128,  124,  125,  122,    1,  131,
	  131,  130,  130,  132,  131,  133,    1,  137,  137,  139,  136,  141,
	  141,  137,  138,  135,    1,  144,  144,  143,  143,  145,  144,  146,
	    1,  150,  150,  152,  149,  154,  154,  150,  151,  148,    1,  157,
	  157,  156,  156,  158,  157,  159,    1,  163,  163,  165,  162,  167,
	  167,  163,  164,  161,    1,  170,  170,  169,  169,  171,  170,  172,
	    1,  176,  176,  178,  175,  180,  180,  176,  177,  174,    1,  183,
	  183,  182,  182,  184,  183,  185,    1,  189,  189,  190,    1,  190,
	    1,  191,  191,  192,  192,  193,  191,  194,    1,  195,  195,  196,
	  196,  197,  195,  198,    1,  199,  200,    1,  201,    1,  202,  202,
	  203,    1,  203,    1,  204,  204,  205,  205,  206,  204,  207,    1,
	  208,  208,  209,  209,  210,  208,  211,    1,  212,  212,  213,  213,
	  214,  212,  215,    1,  216,  217,    1,  218,    1,  219,  219,  221,
	  222,  223,  223,  219,  220,  218,    1,  224,  224,  226,  227,  224,
	  225,  228,    1,  229,  230,    1,  231,    1,  232,  232,  234,  235,
	  236,  236,  232,  233,  231,    1,  237,  237,  239,  240,  237,  238,
	  241,    1,  242,  243,    1,  244,    1,  245,  245,  247,  248,  249,
	  249,  245,  246,  244,    1,  250,  250,  252,  253,  250,  251,  254,
	    1,  255,  256,    1,  257,    1,  219,  219,  221,  218,  223,  223,
	  219,  220,  217,    1,  226,  226,  225,  225,  227,  226,  228,    1,
	  232,  232,  234,  231,  236,  236,  232,  233,  230,    1,  239,  239,
	  238,  238,  240,  239,  241,    1,  245,  245,  247,  244,  249,  249,
	  245,  246,  243,    1,  252,  252,  251,  251,  253,  252,  254,    1,
	  258,  258,  259,    1,  259,    1,  260,  260,  261,  261,  262,  260,
	  263,    1,  264,  264,  265,  265,  266,  264,  267,    1,  268,  269,
	    1,  270,    1,  271,  271,  273,  274,  275,  275,  271,  272,  270,
	    1,  276,  276,  278,  279,  276,  277,  280,    1,  281,  282,    1,
	  283,    1,  284,  284,  286,  287,  288,  288,  284,  285,  283,    1,
	  289,  289,  291,  292,  289,  290,  293,    1,  294,  295,    1,  296,
	    1,  297,  297,  299,  300,  301,  301,  297,  298,  296,    1,  302,
	  302,  304,  305,  302,  303,  306,    1,  307,  308,    1,  309,    1,
	  271,  271,  273,  270,  275,  275,  271,  272,  269,    1,  278,  278,
	  277,  277,  279,  278,  280,    1,  284,  284,  286,  283,  288,  288,
	  284,  285,  282,    1,  291,  291,  290,  290,  292,  291,  293,    1,
	  297,  297,  299,  296,  301,  301,  297,  298,  295,    1,  304,  304,
	  303,  303,  305,  304,  306,    1,  310,  310,  311,    1,  311,    1,
	  312,  312,  313,  313,  314,  312,  315,    1,  316,  316,  317,  317,
	  318,  316,  319,    1,  320,  321,    1,  322,    1,  323,  323,  325,
	  326,  327,  327,  323,  324,  322,    1,  328,  328,  330,  331,  328,
	  329,  332,    1,  333,  334,    1,  335,    1,  323,  323,  325,  322,
	  327,  327,  323,  324,  321,    1,  330,  330,  329,  329,  331,  330,
	  332,    1,  336,  336,  337,    1,  337,    1,  338,  338,  339,  339,
	  340,  338,  341,    1,  342,  342,  343,  343,  344,  342,  345,    1,
	  346,  347,    1,  348,    1,  349,  349,  350,    1,  350,    1,  351,
	  351,  352,  351,  353,    1,  354,  354,  355,  355,  356,  354,  357,
	    1,  358,  358,  359,  359,  360,  358,  361,    1,  362,  362,  363,
	  363,  364,  362,  365,    1,  366,  366,  367,  367,  368,  366,  369,
	    1,   12,   12,   14,   11,   16,   16,   12,   13,   10,    1,   19,
	   19,   18,   18,   20,   19,   21,    1,  370,  370,  371,    1,  371,
	    1,  372,  372,  373,  373,  374,  372,  375,    1,  376,  376,  377,
	  377,  378,  376,  379,    1,  380,  380,  381,  381,  382,  380,  383,
	    1,  384,  384,  385,  385,  386,  384,  387,    1,  388,  388,  389,
	    1,  389,    1,   12,   12,   14,   15,   12,   13,  389,    1,  390,
	  390,  391,    1,  391,    1,  323,  323,  325,  326,  323,  324,  391,
	    1,  392,  392,  393,    1,  393,    1,  297,  297,  299,  300,  297,
	  298,  393,    1,  394,  394,  395,    1,  395,    1,  284,  284,  286,
	  287,  284,  285,  395,    1,  396,  396,  397,    1,  397,    1,  271,
	  271,  273,  274,  271,  272,  397,    1,  398,  398,  399,    1,  399,
	    1,  245,  245,  247,  248,  245,  246,  399,    1,  400,  400,  401,
	    1,  401,    1,  232,  232,  234,  235,  232,  233,  401,    1,  402,
	  402,  403,    1,  403,    1,  219,  219,  221,  222,  219,  220,  403,
	    1,  404,  404,  405,    1,  405,    1,  176,  176,  178,  179,  176,
	  177,  405,    1,  406,  406,  407,    1,  407,    1,  163,  163,  165,
	  166,  163,  164,  407,    1,  408,  408,  409,    1,  409,    1,  150,
	  150,  152,  153,  150,  151,  409,    1,  410,  410,  411,    1,  411,
	    1,  137,  137,  139,  140,  137,  138,  411,    1,  412,  412,  413,
	    1,  413,    1,  124,  124,  126,  127,  124,  125,  413,    1,  414,
	  414,  415,    1,  415,    1,  104,  104,  103,  103,  105,  104,  106,
	    1,  416,  416,  417,    1,  417,    1,   97,   97,   99,  100,   97,
	   98,  417,    1,   97,   97,   99,   96,  101,  101,   97,   98,   95,
	    1,   91,   91,   90,   90,   92,   91,   93,    1,  418,  418,  419,
	  418,    1,  420,  420,  421,  420,    1,  422,  422,  423,    1,  423,
	    1,   74,   74,   75,   74,  423,    1,   74,   74,   75,   73,   76,
	   76,   74,   72,    1,   68,   68,   67,   67,   69,   68,   70,    1,
	  424,  424,  425,    1,  425,    1,   61,   61,   63,   64,   61,   62,
	  425,    1,   61,   61,   63,   60,   65,   65,   61,   62,  426,    1,
	  427,  427,  428,    1,  428,    1,  429,  429,  430,    1,  430,    1,
	   28,   28,   30,   31,   28,   29,  430,    1,  431,  431,  432,  433,
	  431,    1,  434,  434,  436,  437,  438,  439,  440,  441,  442,  443,
	  444,  445,  446,  447,  448,  449,  450,  440,  451,  452,  453,  454,
	  455,  456,  457,  448,  434,  435,   24,    1,  458,  458,   41,   43,
	  459,  460,  461,  462,  432,  463,  464,  465,  466,  467,  468,  469,
	  470,  471,  433,  472,  473,  474,  475,  467,  458,   42,   44,    1,
	  476,  476,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,
	  488,  489,  490,  491,  492,  482,  493,  494,  495,  496,  497,  498,
	  499,  490,  476,  477,   40,    1,  476,  476,  478,   40,  480,  481,
	  482,  483,  484,  485,  486,  487,  488,  489,  490,  491,  492,  482,
	  493,  494,  495,  496,  497,  498,  499,  490,  476,  477,   39,    1,
	  500,  500,  501,  502,  503,  504,  505,  506,  507,  508,  509,  510,
	  511,  512,  513,  514,  515,  505,  516,  517,  518,  519,  520,  521,
	  522,  513,  500,  109,    1,  523,  523,   48,   49,  459,  460,  461,
	  462,  432,  463,  464,  465,  466,  467,  468,  469,  470,  471,  433,
	  472,  473,  474,  475,  467,  523,   50,    1,  524,  524,  526,  527,
	  528,  529,  530,  531,  532,  533,  534,  535,  536,  537,  538,  539,
	  540,  530,  541,  542,  543,  544,  545,  546,  547,  538,  524,  525,
	  188,    1,  548,  548,  117,  119,  459,  460,  461,  462,  432,  463,
	  464,  465,  466,  467,  468,  469,  470,  471,  433,  472,  473,  474,
	  475,  467,  548,  118,  120,    1,  524,  524,  526,  188,  528,  529,
	  530,  531,  532,  533,  534,  535,  536,  537,  538,  539,  540,  530,
	  541,  542,  543,  544,  545,  546,  547,  538,  524,  525,  187,    1,
	  524,  524,  526,  527,  528,  529,  531,  532,  533,  534,  535,  536,
	  537,  538,  539,  540,  541,  542,  543,  544,  545,  546,  547,  538,
	  524,  525,  190,    1,  549,  549,  551,  552,  553,  554,  555,  556,
	  557,  558,  559,  560,  561,  562,  563,  564,  565,  555,  566,  567,
	  568,  569,  570,  571,  572,  563,  549,  550,  201,    1,  573,  573,
	  195,  197,  459,  460,  461,  462,  432,  463,  464,  465,  466,  467,
	  468,  469,  470,  471,  433,  472,  473,  474,  475,  467,  573,  196,
	  198,    1,  549,  549,  551,  201,  553,  554,  555,  556,  557,  558,
	  559,  560,  561,  562,  563,  564,  565,  555,  566,  567,  568,  569,
	  570,  571,  572,  563,  549,  550,  200,    1,  549,  549,  551,  552,
	  553,  554,  556,  557,  558,  559,  560,  561,  562,  563,  564,  565,
	  566,  567,  568,  569,  570,  571,  572,  563,  549,  550,  203,    1,
	  574,  574,  576,  577,  578,  579,  580,  581,  582,  583,  584,  585,
	  586,  587,  588,  589,  590,  580,  591,  592,  593,  594,  595,  596,
	  597,  588,  574,  575,  257,    1,  598,  598,  212,  214,  459,  460,
	  461,  462,  432,  463,  464,  465,  466,  467,  468,  469,  470,  471,
	  433,  472,  473,  474,  475,  467,  598,  213,  215,    1,  574,  574,
	  576,  257,  578,  579,  580,  581,  582,  583,  584,  585,  586,  587,
	  588,  589,  590,  580,  591,  592,  593,  594,  595,  596,  597,  588,
	  574,  575,  256,    1,  574,  574,  576,  577,  578,  579,  581,  582,
	  583,  584,  585,  586,  587,  588,  589,  590,  591,  592,  593,  594,
	  595,  596,  597,  588,  574,  575,  259,    1,  599,  599,  601,  602,
	  603,  604,  605,  606,  607,  608,  609,  610,  611,  612,  613,  614,
	  615,  605,  616,  617,  618,  619,  620,  621,  622,  613,  599,  600,
	  309,    1,  623,  623,  264,  266,  459,  460,  461,  462,  432,  463,
	  464,  465,  466,  467,  468,  469,  470,  471,  433,  472,  473,  474,
	  475,  467,  623,  265,  267,    1,  599,  599,  601,  309,  603,  604,
	  605,  606,  607,  608,  609,  610,  611,  612,  613,  614,  615,  605,
	  616,  617,  618,  619,  620,  621,  622,  613,  599,  600,  308,    1,
	  599,  599,  601,  602,  603,  604,  606,  607,  608,  609,  610,  611,
	  612,  613,  614,  615,  616,  617,  618,  619,  620,  621,  622,  613,
	  599,  600,  311,    1,  624,  624,  626,  627,  628,  629,  630,  631,
	  632,  633,  634,  635,  636,  637,  638,  639,  640,  630,  641,  642,
	  643,  644,  645,  646,  647,  638,  624,  625,  335,    1,  648,  648,
	  316,  318,  459,  460,  461,  462,  432,  463,  464,  465,  466,  467,
	  468,  469,  470,  471,  433,  472,  473,  474,  475,  467,  648,  317,
	  319,    1,  624,  624,  626,  335,  628,  629,  630,  631,  632,  633,
	  634,  635,  636,  637,  638,  639,  640,  630,  641,  642,  643,  644,
	  645,  646,  647,  638,  624,  625,  334,    1,  624,  624,  626,  627,
	  628,  629,  631,  632,  633,  634,  635,  636,  637,  638,  639,  640,
	  641,  642,  643,  644,  645,  646,  647,  638,  624,  625,  337,    1,
	  649,  649,  651,  652,  653,  654,  655,  656,  657,  658,  659,  660,
	  661,  662,  663,  664,  665,  655,  666,  667,  668,  669,  670,  671,
	  672,  663,  649,  650,  348,    1,  673,  673,  342,  344,  459,  460,
	  461,  462,  432,  463,  464,  465,  466,  467,  468,  469,  470,  471,
	  433,  472,  473,  474,  475,  467,  673,  343,  345,    1,  649,  649,
	  651,  348,  653,  654,  655,  656,  657,  658,  659,  660,  661,  662,
	  663,  664,  665,  655,  666,  667,  668,  669,  670,  671,  672,  663,
	  649,  650,  347,    1,  649,  649,  651,  652,  653,  654,  656,  657,
	  658,  659,  660,  661,  662,  663,  664,  665,  666,  667,  668,  669,
	  670,  671,  672,  663,  649,  650,  350,    1,  674,  674,  675,  676,
	  677,  678,  679,  680,  681,  682,  683,  684,  685,  686,  687,  688,
	  689,  690,  691,  692,  693,  684,  674,    1,  694,  694,  459,  460,
	  461,  462,  432,  463,  464,  465,  466,  467,  468,  469,  470,  471,
	  433,  472,  473,  474,  475,  467,  694,    1,  434,  434,  436,   24,
	  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,
	  450,  440,  451,  452,  453,  454,  455,  456,  457,  448,  434,  435,
	   23,    1,  434,  434,  436,  437,  438,  439,  441,  442,  443,  444,
	  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
	  457,  448,  434,  435,  371,    1,  500,  500,  501,  502,  503,  504,
	  506,  507,  508,  509,  510,  511,  512,  513,  514,  515,  516,  517,
	  518,  519,  520,  521,  522,  513,  500,  415,    1,  500,  500,  501,
	  109,  503,  504,  505,  506,  507,  508,  509,  510,  511,  512,  513,
	  514,  515,  505,  516,  517,  518,  519,  520,  521,  522,  513,  500,
	  108,    1,  476,  476,  478,  479,  480,  481,  483,  484,  485,  486,
	  487,  488,  489,  490,  491,  492,  493,  494,  495,  496,  497,  498,
	  499,  490,  476,  477,  428,    1,    0
	};
}

private static final short _path_indicies[] = init__path_indicies_0();


private static short[] init__path_trans_targs_0()
{
	return new short [] {
	    2,    0,    3,    4,  161,    2,    3,    4,  161,    4,  161,    5,
	    6,    7,  162,    8,  169,    6,    7,  162,    8,  265,    8,  265,
	  233,   10,   16,   11,   12,   13,   17,   14,  229,   12,   13,   17,
	   14,  236,   14,  236,  235,   15,    9,   10,   16,   19,   20,   43,
	   19,   20,   43,   21,   22,   23,   24,   44,   22,   23,   24,  226,
	   25,   26,   27,  222,   28,  223,   26,   27,  222,   28,  221,   28,
	  221,   29,   30,   31,  218,   30,   31,   32,  217,   33,   34,   33,
	   34,   35,  216,   36,  215,   36,   37,  215,   38,  214,   38,  214,
	   39,   40,   41,  210,   42,  211,   40,   41,  210,   42,  268,   42,
	  268,  237,   43,   45,   46,   48,   49,   50,   71,   48,   49,   50,
	   71,   50,   71,   51,   52,   53,   72,   54,  205,   52,   53,   72,
	   54,   73,   54,   73,   55,   56,   57,   74,   58,  202,   56,   57,
	   74,   58,   75,   58,   75,   59,   60,   61,   76,   62,  199,   60,
	   61,   76,   62,   77,   62,   77,   63,   64,   65,   78,   66,  196,
	   64,   65,   78,   66,   79,   66,   79,   67,   68,   69,   80,   70,
	  193,   68,   69,   80,   70,  241,   70,  241,  239,   82,  242,   84,
	   85,   86,  245,   84,   85,   86,  245,   86,  245,  243,   88,  246,
	   15,    9,   10,   16,   91,   92,   93,  106,   91,   92,   93,  106,
	   93,  106,   94,   95,   96,  107,   97,  190,   95,   96,  107,   97,
	  108,   97,  108,   98,   99,  100,  109,  101,  187,   99,  100,  109,
	  101,  110,  101,  110,  102,  103,  104,  111,  105,  184,  103,  104,
	  111,  105,  249,  105,  249,  247,  113,  250,  115,  116,  117,  130,
	  115,  116,  117,  130,  117,  130,  118,  119,  120,  131,  121,  181,
	  119,  120,  131,  121,  132,  121,  132,  122,  123,  124,  133,  125,
	  178,  123,  124,  133,  125,  134,  125,  134,  126,  127,  128,  135,
	  129,  175,  127,  128,  135,  129,  253,  129,  253,  251,  137,  254,
	  139,  140,  141,  146,  139,  140,  141,  146,  141,  146,  142,  143,
	  144,  147,  145,  172,  143,  144,  147,  145,  257,  145,  257,  255,
	  149,  258,  151,  152,  153,  261,  151,  152,  153,  261,  153,  261,
	  259,  155,  262,   19,   20,   43,   48,   49,   50,   71,   84,   85,
	   86,  245,   15,    9,   10,   16,    2,    3,    4,  161,  164,  266,
	   91,   92,   93,  106,  115,  116,  117,  130,  139,  140,  141,  146,
	  151,  152,  153,  261,  170,  171,  173,  174,  176,  177,  179,  180,
	  182,  183,  185,  186,  188,  189,  191,  192,  194,  195,  197,  198,
	  200,  201,  203,  204,  206,  207,  209,  267,  212,  213,   36,  215,
	   33,   34,  219,  220,  224,  225,  226,  228,  269,  230,  231,  232,
	    1,  160,  234,    9,   15,   10,   18,   47,  163,   83,   89,    1,
	   90,  114,  138,  150,  263,  156,  157,  158,  159,  160,  165,  166,
	  167,  168,  234,   18,   47,   83,   89,   90,  114,  138,  150,  263,
	  156,  157,  158,  159,  165,  166,  167,  168,  234,    9,   15,   10,
	   18,   47,  227,   83,   89,    1,   90,  114,  138,  150,  263,  156,
	  157,  158,  159,  160,  165,  166,  167,  168,  238,   19,   20,   18,
	   47,  208,   83,   89,    1,   90,  114,  138,  150,  263,  156,  157,
	  158,  159,  160,  165,  166,  167,  168,  238,  240,   49,   48,   50,
	   18,   47,   81,   83,   89,    1,   90,  114,  138,  150,  263,  156,
	  157,  158,  159,  160,  165,  166,  167,  168,  240,  244,   85,   84,
	   86,   18,   47,   87,   83,   89,    1,   90,  114,  138,  150,  263,
	  156,  157,  158,  159,  160,  165,  166,  167,  168,  244,  248,   92,
	   91,   93,   18,   47,  112,   83,   89,    1,   90,  114,  138,  150,
	  263,  156,  157,  158,  159,  160,  165,  166,  167,  168,  248,  252,
	  116,  115,  117,   18,   47,  136,   83,   89,    1,   90,  114,  138,
	  150,  263,  156,  157,  158,  159,  160,  165,  166,  167,  168,  252,
	  256,  140,  139,  141,   18,   47,  148,   83,   89,    1,   90,  114,
	  138,  150,  263,  156,  157,  158,  159,  160,  165,  166,  167,  168,
	  256,  260,  152,  151,  153,   18,   47,  154,   83,   89,    1,   90,
	  114,  138,  150,  263,  156,  157,  158,  159,  160,  165,  166,  167,
	  168,  260,  264,   18,   47,   83,   89,    1,   90,  114,  138,  150,
	  263,  156,  157,  158,  159,  160,  165,  166,  167,  168,  264
	};
}

private static final short _path_trans_targs[] = init__path_trans_targs_0();


private static byte[] init__path_trans_actions_0()
{
	return new byte [] {
	    9,    0,   45,   45,   45,    0,    1,    1,    1,    0,    0,    0,
	    3,   15,    3,   15,    0,    0,    1,    0,    1,    1,    0,    0,
	    0,    0,    0,    0,    3,   15,    3,   15,    0,    0,    1,    0,
	    1,    1,    0,    0,    0,    0,    1,    1,    1,    9,   45,   45,
	    0,    1,    1,    0,    3,    3,   15,    0,    0,    0,    1,    1,
	    0,    3,   15,    3,   15,    0,    0,    1,    0,    1,    1,    0,
	    0,    0,    3,    3,    0,    0,    0,    0,    0,    7,    7,    0,
	    0,    0,    0,    7,    7,    0,    1,    0,    1,    1,    0,    0,
	    0,    3,   15,    3,   15,    0,    0,    1,    0,    1,    1,    0,
	    0,    0,    0,    0,    0,    9,   45,   45,   45,    0,    1,    1,
	    1,    0,    0,    0,    3,   15,    3,   15,    0,    0,    1,    0,
	    1,    1,    0,    0,    0,    3,   15,    3,   15,    0,    0,    1,
	    0,    1,    1,    0,    0,    0,    3,   15,    3,   15,    0,    0,
	    1,    0,    1,    1,    0,    0,    0,    3,   15,    3,   15,    0,
	    0,    1,    0,    1,    1,    0,    0,    0,    3,   15,    3,   15,
	    0,    0,    1,    0,    1,    1,    0,    0,    0,    0,    0,    9,
	   45,   45,   45,    0,    1,    1,    1,    0,    0,    0,    0,    0,
	    9,   45,   45,   45,    9,   45,   45,   45,    0,    1,    1,    1,
	    0,    0,    0,    3,   15,    3,   15,    0,    0,    1,    0,    1,
	    1,    0,    0,    0,    3,   15,    3,   15,    0,    0,    1,    0,
	    1,    1,    0,    0,    0,    3,   15,    3,   15,    0,    0,    1,
	    0,    1,    1,    0,    0,    0,    0,    0,    9,   45,   45,   45,
	    0,    1,    1,    1,    0,    0,    0,    3,   15,    3,   15,    0,
	    0,    1,    0,    1,    1,    0,    0,    0,    3,   15,    3,   15,
	    0,    0,    1,    0,    1,    1,    0,    0,    0,    3,   15,    3,
	   15,    0,    0,    1,    0,    1,    1,    0,    0,    0,    0,    0,
	    9,   45,   45,   45,    0,    1,    1,    1,    0,    0,    0,    3,
	   15,    3,   15,    0,    0,    1,    0,    1,    1,    0,    0,    0,
	    0,    0,    9,   45,   45,   45,    0,    1,    1,    1,    0,    0,
	    0,    0,    0,   11,   48,   48,   11,   48,   48,   48,   11,   48,
	   48,   48,   11,   48,   48,   48,   11,   48,   48,   48,    0,    0,
	   11,   48,   48,   48,   11,   48,   48,   48,   11,   48,   48,   48,
	   11,   48,   48,   48,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    5,    5,
	    5,    5,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   18,   51,   18,   51,   18,   18,    0,   18,   18,   18,
	   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
	   18,   18,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   21,   55,   21,   55,
	   21,   21,    0,   21,   21,   21,   21,   21,   21,   21,   21,   21,
	   21,   21,   21,   21,   21,   21,   21,   21,   42,   42,   83,   42,
	   42,    0,   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
	   42,   42,   42,   42,   42,   42,   42,    0,   30,   67,   30,   67,
	   30,   30,    0,   30,   30,   30,   30,   30,   30,   30,   30,   30,
	   30,   30,   30,   30,   30,   30,   30,   30,    0,   24,   59,   24,
	   59,   24,   24,    0,   24,   24,   24,   24,   24,   24,   24,   24,
	   24,   24,   24,   24,   24,   24,   24,   24,   24,    0,   36,   75,
	   36,   75,   36,   36,    0,   36,   36,   36,   36,   36,   36,   36,
	   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,    0,   33,
	   71,   33,   71,   33,   33,    0,   33,   33,   33,   33,   33,   33,
	   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,    0,
	   39,   79,   39,   79,   39,   39,    0,   39,   39,   39,   39,   39,
	   39,   39,   39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
	    0,   27,   63,   27,   63,   27,   27,    0,   27,   27,   27,   27,
	   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
	   27,    0,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
	   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,    0
	};
}

private static final byte _path_trans_actions[] = init__path_trans_actions_0();


private static byte[] init__path_eof_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   18,    0,   21,   21,   42,    0,   30,
	    0,   30,   30,   24,    0,   24,   24,   36,    0,   36,   36,   33,
	    0,   33,   33,   39,    0,   39,   39,   27,    0,   27,   27,   13,
	    0,   18,   18,   42,   42,   21
	};
}

private static final byte _path_eof_actions[] = init__path_eof_actions_0();


static final int path_start = 232;
static final int path_first_final = 232;
static final int path_error = 0;

static final int path_en_main = 232;

// line 267 "src/main/ragel/PathParser.rl"

	final GeneralPath parse(final CharSequence data) throws ParseException {
		return parse(data.toString().toCharArray());
	}

	final GeneralPath parse(final CharSequence data, final PathBuilder pb) throws ParseException {
		return parse(data.toString().toCharArray(), pb);
	}

	final GeneralPath parse(final char[] data) throws ParseException {
		return parse(data, new PathBuilder());
	}
	
	final GeneralPath parse(final char[] data, final PathBuilder pb) throws ParseException {
		if(data == null)
			return pb.toPath();
		// high-level buffers
		int start = -1;
		final float[] argv = new float[7];
		int argc = 0;
		boolean absolute = true;		
		
		// ragel variables (low level)
		final int pe = data.length;
		final int eof = pe;
		int cs, p = 0;
		int top;

		
// line 834 "src/main/java/org/piccolo2d/svg/PathParser.java"
	{
	cs = path_start;
	}
// line 296 "src/main/ragel/PathParser.rl"
		
// line 840 "src/main/java/org/piccolo2d/svg/PathParser.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _path_key_offsets[cs];
	_trans = _path_index_offsets[cs];
	_klen = _path_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _path_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _path_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _path_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _path_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _path_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _path_indicies[_trans];
	cs = _path_trans_targs[_trans];

	if ( _path_trans_actions[_trans] != 0 ) {
		_acts = _path_trans_actions[_trans];
		_nacts = (int) _path_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _path_actions[_acts++] )
			{
	case 0:
// line 49 "src/main/ragel/PathParser.rl"
	{
		start = p;
	}
	break;
	case 1:
// line 53 "src/main/ragel/PathParser.rl"
	{
		argv[argc++] = Float.parseFloat(new String(data, start, p - start));
		start = -1;
	}
	break;
	case 2:
// line 58 "src/main/ragel/PathParser.rl"
	{
		;
	}
	break;
	case 3:
// line 62 "src/main/ragel/PathParser.rl"
	{
		;
	}
	break;
	case 4:
// line 66 "src/main/ragel/PathParser.rl"
	{
		absolute = true;
	}
	break;
	case 5:
// line 70 "src/main/ragel/PathParser.rl"
	{
		absolute = false;
	}
	break;
	case 6:
// line 74 "src/main/ragel/PathParser.rl"
	{
		pb.moveTo(absolute, argv[0], argv[1]);
		argc = 0;
	}
	break;
	case 7:
// line 79 "src/main/ragel/PathParser.rl"
	{
		pb.lineTo(absolute, argv[0], argv[1]);
		argc = 0;
	}
	break;
	case 8:
// line 84 "src/main/ragel/PathParser.rl"
	{
		pb.hlineTo(absolute, argv[0]);
		argc = 0;
	}
	break;
	case 9:
// line 89 "src/main/ragel/PathParser.rl"
	{
		pb.vlineTo(absolute, argv[0]);
		argc = 0;
	}
	break;
	case 10:
// line 94 "src/main/ragel/PathParser.rl"
	{
		// I have no idea why this is not sequential...
		pb.cubicTo(absolute, argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);
		argc = 0;
	}
	break;
	case 11:
// line 100 "src/main/ragel/PathParser.rl"
	{
		// I have no idea why this is not sequential...
		pb.smoothCubicTo(absolute, argv[0], argv[1], argv[2], argv[3]);
		argc = 0;
	}
	break;
	case 12:
// line 106 "src/main/ragel/PathParser.rl"
	{
		pb.quadTo(absolute, argv[0], argv[1], argv[2], argv[3]);
		argc = 0;
	}
	break;
	case 13:
// line 111 "src/main/ragel/PathParser.rl"
	{
		pb.smoothQuadTo(absolute, argv[0], argv[1]);
		argc = 0;
	}
	break;
	case 14:
// line 116 "src/main/ragel/PathParser.rl"
	{
		System.out.println("arc: TODO");		
		argc = 0;
	}
	break;
	case 15:
// line 121 "src/main/ragel/PathParser.rl"
	{
		pb.closePath();		
	}
	break;
// line 1028 "src/main/java/org/piccolo2d/svg/PathParser.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _path_eof_actions[cs];
	int __nacts = (int) _path_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _path_actions[__acts++] ) {
	case 1:
// line 53 "src/main/ragel/PathParser.rl"
	{
		argv[argc++] = Float.parseFloat(new String(data, start, p - start));
		start = -1;
	}
	break;
	case 6:
// line 74 "src/main/ragel/PathParser.rl"
	{
		pb.moveTo(absolute, argv[0], argv[1]);
		argc = 0;
	}
	break;
	case 7:
// line 79 "src/main/ragel/PathParser.rl"
	{
		pb.lineTo(absolute, argv[0], argv[1]);
		argc = 0;
	}
	break;
	case 8:
// line 84 "src/main/ragel/PathParser.rl"
	{
		pb.hlineTo(absolute, argv[0]);
		argc = 0;
	}
	break;
	case 9:
// line 89 "src/main/ragel/PathParser.rl"
	{
		pb.vlineTo(absolute, argv[0]);
		argc = 0;
	}
	break;
	case 10:
// line 94 "src/main/ragel/PathParser.rl"
	{
		// I have no idea why this is not sequential...
		pb.cubicTo(absolute, argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);
		argc = 0;
	}
	break;
	case 11:
// line 100 "src/main/ragel/PathParser.rl"
	{
		// I have no idea why this is not sequential...
		pb.smoothCubicTo(absolute, argv[0], argv[1], argv[2], argv[3]);
		argc = 0;
	}
	break;
	case 12:
// line 106 "src/main/ragel/PathParser.rl"
	{
		pb.quadTo(absolute, argv[0], argv[1], argv[2], argv[3]);
		argc = 0;
	}
	break;
	case 13:
// line 111 "src/main/ragel/PathParser.rl"
	{
		pb.smoothQuadTo(absolute, argv[0], argv[1]);
		argc = 0;
	}
	break;
	case 14:
// line 116 "src/main/ragel/PathParser.rl"
	{
		System.out.println("arc: TODO");		
		argc = 0;
	}
	break;
	case 15:
// line 121 "src/main/ragel/PathParser.rl"
	{
		pb.closePath();		
	}
	break;
// line 1127 "src/main/java/org/piccolo2d/svg/PathParser.java"
		}
	}
	}

case 5:
	}
	break; }
	}
// line 297 "src/main/ragel/PathParser.rl"

		if ( cs < path_first_final )
			throw new ParseException(new String(data), p);
        return pb.toPath();
	}
}
