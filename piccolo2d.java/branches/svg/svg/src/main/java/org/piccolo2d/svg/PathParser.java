// line 1 "src/main/ragel/PathParser.rl"
/*
 * Copyright (c) 2008, Piccolo2D project, http://piccolo2d.org
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of conditions
 * and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions
 * and the following disclaimer in the documentation and/or other materials provided with the
 * distribution.
 *
 * None of the name of the Piccolo2D project, the University of Maryland, or the names of its contributors
 * may be used to endorse or promote products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.piccolo2d.svg;

import java.awt.geom.GeneralPath;
import java.text.ParseException;

/** <a href="http://research.cs.queensu.ca/~thurston/ragel/">Ragel> parser 
 * for <a href="http://www.w3.org/TR/SVG11/paths.html#PathDataBNF">paths</a> - This file is auto-generated by rl2java.sh.
 * <p>
 * DO NOT EDIT MANUALLY!!!
 * </p>
 */
class PathParser {
// line 212 "src/main/ragel/PathParser.rl"



// line 46 "src/main/java/org/piccolo2d/svg/PathParser.java"
private static byte[] init__path_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    4,    2,    1,    5,
	    2,    1,    6,    2,    1,    7,    2,    1,    8,    2,    1,    9,
	    2,    1,   10,    2,    1,   11,    2,    1,   12,    2,    1,   13,
	    2,    3,    0,    3,    1,    5,    2,    3,    1,    5,    4,    3,
	    1,    6,    2,    3,    1,    6,    4,    3,    1,    7,    2,    3,
	    1,    7,    4,    3,    1,    8,    2,    3,    1,    8,    4,    3,
	    1,    9,    2,    3,    1,    9,    4,    3,    1,   10,    2,    3,
	    1,   10,    4,    3,    1,   11,    2,    3,    1,   11,    4,    3,
	    1,   12,    2,    3,    1,   12,    4,    3,    1,   13,    2,    3,
	    1,   13,    4
	};
}

private static final byte _path_actions[] = init__path_actions_0();


private static short[] init__path_key_offsets_0()
{
	return new short [] {
	    0,    0,    5,   13,   16,   18,   26,   35,   38,   40,   43,   45,
	   53,   62,   65,   67,   75,   84,   92,   98,  100,  108,  115,  121,
	  123,  131,  140,  143,  145,  153,  159,  164,  168,  174,  179,  183,
	  192,  195,  197,  205,  214,  217,  219,  228,  232,  234,  240,  248,
	  251,  253,  261,  270,  273,  275,  283,  292,  295,  297,  305,  314,
	  317,  319,  327,  336,  339,  341,  349,  358,  361,  363,  372,  380,
	  389,  397,  406,  414,  423,  431,  440,  448,  452,  454,  462,  465,
	  467,  471,  473,  481,  484,  486,  494,  503,  506,  508,  516,  525,
	  528,  530,  538,  547,  550,  552,  561,  569,  578,  586,  595,  603,
	  607,  609,  617,  620,  622,  630,  639,  642,  644,  652,  661,  664,
	  666,  674,  683,  686,  688,  697,  705,  714,  722,  731,  739,  743,
	  745,  753,  756,  758,  766,  775,  778,  780,  789,  797,  801,  803,
	  811,  814,  816,  820,  822,  826,  828,  834,  838,  840,  846,  850,
	  852,  858,  862,  864,  870,  874,  876,  882,  886,  888,  894,  898,
	  900,  906,  910,  912,  918,  922,  924,  930,  934,  936,  942,  946,
	  948,  954,  958,  960,  966,  970,  972,  980,  984,  986,  992, 1001,
	 1009, 1013, 1015, 1021, 1030, 1038, 1042, 1044, 1050, 1059, 1063, 1065,
	 1069, 1071, 1077, 1081, 1083, 1091, 1095, 1097, 1103, 1112, 1140, 1169,
	 1197, 1226, 1254, 1281, 1309, 1338, 1367, 1393, 1421, 1450, 1479, 1505,
	 1533, 1562, 1591, 1617, 1645, 1674, 1703, 1729, 1757, 1786, 1815, 1841,
	 1869, 1898, 1927, 1953, 1976, 2002, 2031, 2057, 2083
	};
}

private static final short _path_key_offsets[] = init__path_key_offsets_0();


private static char[] init__path_trans_keys_0()
{
	return new char [] {
	   32,   77,  109,    9,   13,   32,   43,   45,   46,    9,   13,   48,
	   57,   46,   48,   57,   48,   57,   32,   44,   69,  101,    9,   13,
	   48,   57,   32,   44,   46,    9,   13,   43,   45,   48,   57,   46,
	   48,   57,   48,   57,   46,   48,   57,   48,   57,   32,   44,   69,
	  101,    9,   13,   48,   57,   32,   44,   46,    9,   13,   43,   45,
	   48,   57,   46,   48,   57,   48,   57,   32,   43,   45,   46,    9,
	   13,   48,   57,   32,   44,   46,   69,  101,    9,   13,   48,   57,
	   32,   43,   45,   46,    9,   13,   48,   57,   32,   46,    9,   13,
	   48,   57,   48,   57,   32,   44,   69,  101,    9,   13,   48,   57,
	   32,   44,   46,    9,   13,   48,   57,   32,   46,    9,   13,   48,
	   57,   48,   57,   32,   44,   69,  101,    9,   13,   48,   57,   32,
	   44,   46,    9,   13,   43,   45,   48,   57,   46,   48,   57,   48,
	   57,   32,   44,   69,  101,    9,   13,   48,   57,   32,   44,    9,
	   13,   48,   49,   32,    9,   13,   48,   49,   32,   44,    9,   13,
	   32,   44,    9,   13,   48,   49,   32,    9,   13,   48,   49,   32,
	   44,    9,   13,   32,   44,   46,    9,   13,   43,   45,   48,   57,
	   46,   48,   57,   48,   57,   32,   44,   69,  101,    9,   13,   48,
	   57,   32,   44,   46,    9,   13,   43,   45,   48,   57,   46,   48,
	   57,   48,   57,   32,   44,   46,   69,  101,    9,   13,   48,   57,
	   43,   45,   48,   57,   48,   57,   32,   44,    9,   13,   48,   57,
	   32,   43,   45,   46,    9,   13,   48,   57,   46,   48,   57,   48,
	   57,   32,   44,   69,  101,    9,   13,   48,   57,   32,   44,   46,
	    9,   13,   43,   45,   48,   57,   46,   48,   57,   48,   57,   32,
	   44,   69,  101,    9,   13,   48,   57,   32,   44,   46,    9,   13,
	   43,   45,   48,   57,   46,   48,   57,   48,   57,   32,   44,   69,
	  101,    9,   13,   48,   57,   32,   44,   46,    9,   13,   43,   45,
	   48,   57,   46,   48,   57,   48,   57,   32,   44,   69,  101,    9,
	   13,   48,   57,   32,   44,   46,    9,   13,   43,   45,   48,   57,
	   46,   48,   57,   48,   57,   32,   44,   69,  101,    9,   13,   48,
	   57,   32,   44,   46,    9,   13,   43,   45,   48,   57,   46,   48,
	   57,   48,   57,   32,   44,   46,   69,  101,    9,   13,   48,   57,
	   32,   43,   45,   46,    9,   13,   48,   57,   32,   44,   46,   69,
	  101,    9,   13,   48,   57,   32,   43,   45,   46,    9,   13,   48,
	   57,   32,   44,   46,   69,  101,    9,   13,   48,   57,   32,   43,
	   45,   46,    9,   13,   48,   57,   32,   44,   46,   69,  101,    9,
	   13,   48,   57,   32,   43,   45,   46,    9,   13,   48,   57,   32,
	   44,   46,   69,  101,    9,   13,   48,   57,   32,   43,   45,   46,
	    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,   32,   43,
	   45,   46,    9,   13,   48,   57,   46,   48,   57,   48,   57,   43,
	   45,   48,   57,   48,   57,   32,   43,   45,   46,    9,   13,   48,
	   57,   46,   48,   57,   48,   57,   32,   44,   69,  101,    9,   13,
	   48,   57,   32,   44,   46,    9,   13,   43,   45,   48,   57,   46,
	   48,   57,   48,   57,   32,   44,   69,  101,    9,   13,   48,   57,
	   32,   44,   46,    9,   13,   43,   45,   48,   57,   46,   48,   57,
	   48,   57,   32,   44,   69,  101,    9,   13,   48,   57,   32,   44,
	   46,    9,   13,   43,   45,   48,   57,   46,   48,   57,   48,   57,
	   32,   44,   46,   69,  101,    9,   13,   48,   57,   32,   43,   45,
	   46,    9,   13,   48,   57,   32,   44,   46,   69,  101,    9,   13,
	   48,   57,   32,   43,   45,   46,    9,   13,   48,   57,   32,   44,
	   46,   69,  101,    9,   13,   48,   57,   32,   43,   45,   46,    9,
	   13,   48,   57,   43,   45,   48,   57,   48,   57,   32,   43,   45,
	   46,    9,   13,   48,   57,   46,   48,   57,   48,   57,   32,   44,
	   69,  101,    9,   13,   48,   57,   32,   44,   46,    9,   13,   43,
	   45,   48,   57,   46,   48,   57,   48,   57,   32,   44,   69,  101,
	    9,   13,   48,   57,   32,   44,   46,    9,   13,   43,   45,   48,
	   57,   46,   48,   57,   48,   57,   32,   44,   69,  101,    9,   13,
	   48,   57,   32,   44,   46,    9,   13,   43,   45,   48,   57,   46,
	   48,   57,   48,   57,   32,   44,   46,   69,  101,    9,   13,   48,
	   57,   32,   43,   45,   46,    9,   13,   48,   57,   32,   44,   46,
	   69,  101,    9,   13,   48,   57,   32,   43,   45,   46,    9,   13,
	   48,   57,   32,   44,   46,   69,  101,    9,   13,   48,   57,   32,
	   43,   45,   46,    9,   13,   48,   57,   43,   45,   48,   57,   48,
	   57,   32,   43,   45,   46,    9,   13,   48,   57,   46,   48,   57,
	   48,   57,   32,   44,   69,  101,    9,   13,   48,   57,   32,   44,
	   46,    9,   13,   43,   45,   48,   57,   46,   48,   57,   48,   57,
	   32,   44,   46,   69,  101,    9,   13,   48,   57,   32,   43,   45,
	   46,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,   32,
	   43,   45,   46,    9,   13,   48,   57,   46,   48,   57,   48,   57,
	   43,   45,   48,   57,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   43,   45,   46,    9,   13,   48,   57,   43,   45,   48,   57,
	   48,   57,   32,   44,    9,   13,   48,   57,   32,   44,   46,   69,
	  101,    9,   13,   48,   57,   32,   43,   45,   46,    9,   13,   48,
	   57,   43,   45,   48,   57,   48,   57,   32,   44,    9,   13,   48,
	   57,   32,   44,   46,   69,  101,    9,   13,   48,   57,   32,   43,
	   45,   46,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,    9,   13,   48,   57,   32,   44,   46,   69,  101,    9,
	   13,   48,   57,   43,   45,   48,   57,   48,   57,   43,   45,   48,
	   57,   48,   57,   32,   44,    9,   13,   48,   57,   43,   45,   48,
	   57,   48,   57,   32,   43,   45,   46,    9,   13,   48,   57,   43,
	   45,   48,   57,   48,   57,   32,   44,    9,   13,   48,   57,   32,
	   44,   46,   69,  101,    9,   13,   48,   57,   32,   44,   65,   67,
	   69,   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,  101,
	  104,  108,  109,  113,  115,  116,  118,  122,    9,   13,   48,   57,
	   32,   44,   46,   65,   67,   72,   76,   77,   81,   83,   84,   86,
	   90,   97,   99,  104,  108,  109,  113,  115,  116,  118,  122,    9,
	   13,   43,   45,   48,   57,   32,   44,   65,   67,   69,   72,   76,
	   77,   81,   83,   84,   86,   90,   97,   99,  101,  104,  108,  109,
	  113,  115,  116,  118,  122,    9,   13,   48,   57,   32,   44,   46,
	   65,   67,   69,   72,   76,   77,   81,   83,   84,   86,   90,   97,
	   99,  101,  104,  108,  109,  113,  115,  116,  118,  122,    9,   13,
	   48,   57,   32,   44,   65,   67,   69,   72,   76,   77,   81,   83,
	   84,   86,   90,   97,   99,  101,  104,  108,  109,  113,  115,  116,
	  118,  122,    9,   13,   48,   57,   32,   44,   46,   65,   67,   72,
	   76,   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,  109,
	  113,  115,  116,  118,  122,    9,   13,   48,   57,   32,   44,   65,
	   67,   69,   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,
	  101,  104,  108,  109,  113,  115,  116,  118,  122,    9,   13,   48,
	   57,   32,   44,   46,   65,   67,   72,   76,   77,   81,   83,   84,
	   86,   90,   97,   99,  104,  108,  109,  113,  115,  116,  118,  122,
	    9,   13,   43,   45,   48,   57,   32,   44,   46,   65,   67,   69,
	   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,  101,  104,
	  108,  109,  113,  115,  116,  118,  122,    9,   13,   48,   57,   32,
	   44,   65,   67,   72,   76,   77,   81,   83,   84,   86,   90,   97,
	   99,  104,  108,  109,  113,  115,  116,  118,  122,    9,   13,   48,
	   57,   32,   44,   65,   67,   69,   72,   76,   77,   81,   83,   84,
	   86,   90,   97,   99,  101,  104,  108,  109,  113,  115,  116,  118,
	  122,    9,   13,   48,   57,   32,   44,   46,   65,   67,   72,   76,
	   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,  109,  113,
	  115,  116,  118,  122,    9,   13,   43,   45,   48,   57,   32,   44,
	   46,   65,   67,   69,   72,   76,   77,   81,   83,   84,   86,   90,
	   97,   99,  101,  104,  108,  109,  113,  115,  116,  118,  122,    9,
	   13,   48,   57,   32,   44,   65,   67,   72,   76,   77,   81,   83,
	   84,   86,   90,   97,   99,  104,  108,  109,  113,  115,  116,  118,
	  122,    9,   13,   48,   57,   32,   44,   65,   67,   69,   72,   76,
	   77,   81,   83,   84,   86,   90,   97,   99,  101,  104,  108,  109,
	  113,  115,  116,  118,  122,    9,   13,   48,   57,   32,   44,   46,
	   65,   67,   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,
	  104,  108,  109,  113,  115,  116,  118,  122,    9,   13,   43,   45,
	   48,   57,   32,   44,   46,   65,   67,   69,   72,   76,   77,   81,
	   83,   84,   86,   90,   97,   99,  101,  104,  108,  109,  113,  115,
	  116,  118,  122,    9,   13,   48,   57,   32,   44,   65,   67,   72,
	   76,   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,  109,
	  113,  115,  116,  118,  122,    9,   13,   48,   57,   32,   44,   65,
	   67,   69,   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,
	  101,  104,  108,  109,  113,  115,  116,  118,  122,    9,   13,   48,
	   57,   32,   44,   46,   65,   67,   72,   76,   77,   81,   83,   84,
	   86,   90,   97,   99,  104,  108,  109,  113,  115,  116,  118,  122,
	    9,   13,   43,   45,   48,   57,   32,   44,   46,   65,   67,   69,
	   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,  101,  104,
	  108,  109,  113,  115,  116,  118,  122,    9,   13,   48,   57,   32,
	   44,   65,   67,   72,   76,   77,   81,   83,   84,   86,   90,   97,
	   99,  104,  108,  109,  113,  115,  116,  118,  122,    9,   13,   48,
	   57,   32,   44,   65,   67,   69,   72,   76,   77,   81,   83,   84,
	   86,   90,   97,   99,  101,  104,  108,  109,  113,  115,  116,  118,
	  122,    9,   13,   48,   57,   32,   44,   46,   65,   67,   72,   76,
	   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,  109,  113,
	  115,  116,  118,  122,    9,   13,   43,   45,   48,   57,   32,   44,
	   46,   65,   67,   69,   72,   76,   77,   81,   83,   84,   86,   90,
	   97,   99,  101,  104,  108,  109,  113,  115,  116,  118,  122,    9,
	   13,   48,   57,   32,   44,   65,   67,   72,   76,   77,   81,   83,
	   84,   86,   90,   97,   99,  104,  108,  109,  113,  115,  116,  118,
	  122,    9,   13,   48,   57,   32,   44,   65,   67,   69,   72,   76,
	   77,   81,   83,   84,   86,   90,   97,   99,  101,  104,  108,  109,
	  113,  115,  116,  118,  122,    9,   13,   48,   57,   32,   44,   46,
	   65,   67,   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,
	  104,  108,  109,  113,  115,  116,  118,  122,    9,   13,   43,   45,
	   48,   57,   32,   44,   46,   65,   67,   69,   72,   76,   77,   81,
	   83,   84,   86,   90,   97,   99,  101,  104,  108,  109,  113,  115,
	  116,  118,  122,    9,   13,   48,   57,   32,   44,   65,   67,   72,
	   76,   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,  109,
	  113,  115,  116,  118,  122,    9,   13,   48,   57,   32,   65,   67,
	   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,
	  109,  113,  115,  116,  118,  122,    9,   13,   32,   44,   65,   67,
	   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,  104,  108,
	  109,  113,  115,  116,  118,  122,    9,   13,   48,   57,   32,   44,
	   46,   65,   67,   69,   72,   76,   77,   81,   83,   84,   86,   90,
	   97,   99,  101,  104,  108,  109,  113,  115,  116,  118,  122,    9,
	   13,   48,   57,   32,   44,   65,   67,   72,   76,   77,   81,   83,
	   84,   86,   90,   97,   99,  104,  108,  109,  113,  115,  116,  118,
	  122,    9,   13,   48,   57,   32,   44,   65,   67,   72,   76,   77,
	   81,   83,   84,   86,   90,   97,   99,  104,  108,  109,  113,  115,
	  116,  118,  122,    9,   13,   48,   57,   32,   44,   46,   65,   67,
	   69,   72,   76,   77,   81,   83,   84,   86,   90,   97,   99,  101,
	  104,  108,  109,  113,  115,  116,  118,  122,    9,   13,   48,   57,
	    0
	};
}

private static final char _path_trans_keys[] = init__path_trans_keys_0();


private static byte[] init__path_single_lengths_0()
{
	return new byte [] {
	    0,    3,    4,    1,    0,    4,    3,    1,    0,    1,    0,    4,
	    3,    1,    0,    4,    5,    4,    2,    0,    4,    3,    2,    0,
	    4,    3,    1,    0,    4,    2,    1,    2,    2,    1,    2,    3,
	    1,    0,    4,    3,    1,    0,    5,    2,    0,    2,    4,    1,
	    0,    4,    3,    1,    0,    4,    3,    1,    0,    4,    3,    1,
	    0,    4,    3,    1,    0,    4,    3,    1,    0,    5,    4,    5,
	    4,    5,    4,    5,    4,    5,    4,    2,    0,    4,    1,    0,
	    2,    0,    4,    1,    0,    4,    3,    1,    0,    4,    3,    1,
	    0,    4,    3,    1,    0,    5,    4,    5,    4,    5,    4,    2,
	    0,    4,    1,    0,    4,    3,    1,    0,    4,    3,    1,    0,
	    4,    3,    1,    0,    5,    4,    5,    4,    5,    4,    2,    0,
	    4,    1,    0,    4,    3,    1,    0,    5,    4,    2,    0,    4,
	    1,    0,    2,    0,    2,    0,    2,    2,    0,    2,    2,    0,
	    2,    2,    0,    2,    2,    0,    2,    2,    0,    2,    2,    0,
	    2,    2,    0,    2,    2,    0,    2,    2,    0,    2,    2,    0,
	    2,    2,    0,    2,    2,    0,    4,    2,    0,    2,    5,    4,
	    2,    0,    2,    5,    4,    2,    0,    2,    5,    2,    0,    2,
	    0,    2,    2,    0,    4,    2,    0,    2,    5,   24,   23,   24,
	   25,   24,   23,   24,   23,   25,   22,   24,   23,   25,   22,   24,
	   23,   25,   22,   24,   23,   25,   22,   24,   23,   25,   22,   24,
	   23,   25,   22,   21,   22,   25,   22,   22,   25
	};
}

private static final byte _path_single_lengths[] = init__path_single_lengths_0();


private static byte[] init__path_range_lengths_0()
{
	return new byte [] {
	    0,    1,    2,    1,    1,    2,    3,    1,    1,    1,    1,    2,
	    3,    1,    1,    2,    2,    2,    2,    1,    2,    2,    2,    1,
	    2,    3,    1,    1,    2,    2,    2,    1,    2,    2,    1,    3,
	    1,    1,    2,    3,    1,    1,    2,    1,    1,    2,    2,    1,
	    1,    2,    3,    1,    1,    2,    3,    1,    1,    2,    3,    1,
	    1,    2,    3,    1,    1,    2,    3,    1,    1,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    1,    1,    2,    1,    1,
	    1,    1,    2,    1,    1,    2,    3,    1,    1,    2,    3,    1,
	    1,    2,    3,    1,    1,    2,    2,    2,    2,    2,    2,    1,
	    1,    2,    1,    1,    2,    3,    1,    1,    2,    3,    1,    1,
	    2,    3,    1,    1,    2,    2,    2,    2,    2,    2,    1,    1,
	    2,    1,    1,    2,    3,    1,    1,    2,    2,    1,    1,    2,
	    1,    1,    1,    1,    1,    1,    2,    1,    1,    2,    1,    1,
	    2,    1,    1,    2,    1,    1,    2,    1,    1,    2,    1,    1,
	    2,    1,    1,    2,    1,    1,    2,    1,    1,    2,    1,    1,
	    2,    1,    1,    2,    1,    1,    2,    1,    1,    2,    2,    2,
	    1,    1,    2,    2,    2,    1,    1,    2,    2,    1,    1,    1,
	    1,    2,    1,    1,    2,    1,    1,    2,    2,    2,    3,    2,
	    2,    2,    2,    2,    3,    2,    2,    2,    3,    2,    2,    2,
	    3,    2,    2,    2,    3,    2,    2,    2,    3,    2,    2,    2,
	    3,    2,    2,    1,    2,    2,    2,    2,    2
	};
}

private static final byte _path_range_lengths[] = init__path_range_lengths_0();


private static short[] init__path_index_offsets_0()
{
	return new short [] {
	    0,    0,    5,   12,   15,   17,   24,   31,   34,   36,   39,   41,
	   48,   55,   58,   60,   67,   75,   82,   87,   89,   96,  102,  107,
	  109,  116,  123,  126,  128,  135,  140,  144,  148,  153,  157,  161,
	  168,  171,  173,  180,  187,  190,  192,  200,  204,  206,  211,  218,
	  221,  223,  230,  237,  240,  242,  249,  256,  259,  261,  268,  275,
	  278,  280,  287,  294,  297,  299,  306,  313,  316,  318,  326,  333,
	  341,  348,  356,  363,  371,  378,  386,  393,  397,  399,  406,  409,
	  411,  415,  417,  424,  427,  429,  436,  443,  446,  448,  455,  462,
	  465,  467,  474,  481,  484,  486,  494,  501,  509,  516,  524,  531,
	  535,  537,  544,  547,  549,  556,  563,  566,  568,  575,  582,  585,
	  587,  594,  601,  604,  606,  614,  621,  629,  636,  644,  651,  655,
	  657,  664,  667,  669,  676,  683,  686,  688,  696,  703,  707,  709,
	  716,  719,  721,  725,  727,  731,  733,  738,  742,  744,  749,  753,
	  755,  760,  764,  766,  771,  775,  777,  782,  786,  788,  793,  797,
	  799,  804,  808,  810,  815,  819,  821,  826,  830,  832,  837,  841,
	  843,  848,  852,  854,  859,  863,  865,  872,  876,  878,  883,  891,
	  898,  902,  904,  909,  917,  924,  928,  930,  935,  943,  947,  949,
	  953,  955,  960,  964,  966,  973,  977,  979,  984,  992, 1019, 1046,
	 1073, 1101, 1128, 1154, 1181, 1208, 1236, 1261, 1288, 1315, 1343, 1368,
	 1395, 1422, 1450, 1475, 1502, 1529, 1557, 1582, 1609, 1636, 1664, 1689,
	 1716, 1743, 1771, 1796, 1819, 1844, 1872, 1897, 1922
	};
}

private static final short _path_index_offsets[] = init__path_index_offsets_0();


private static short[] init__path_indicies_0()
{
	return new short [] {
	    0,    2,    2,    0,    1,    3,    4,    4,    5,    3,    6,    1,
	    7,    8,    1,    9,    1,   10,   11,   12,   12,   10,    9,    1,
	   13,   15,   16,   13,   14,   17,    1,   16,   17,    1,   18,    1,
	   19,   20,    1,   21,    1,   22,   23,   24,   24,   22,   21,    1,
	   25,   27,   28,   25,   26,   29,    1,   28,   29,    1,   30,    1,
	   31,   32,   32,   33,   31,   34,    1,   22,   23,   21,   24,   24,
	   22,   20,    1,   27,   26,   26,   28,   27,   29,    1,   35,   36,
	   35,   37,    1,   38,    1,   39,   40,   41,   41,   39,   38,    1,
	   42,   43,   44,   42,   45,    1,   43,   44,   43,   45,    1,   46,
	    1,   47,   48,   49,   49,   47,   46,    1,   50,   52,   53,   50,
	   51,   54,    1,   53,   54,    1,   55,    1,   56,   57,   58,   58,
	   56,   55,    1,   59,   60,   59,   61,    1,   60,   60,   61,    1,
	   62,   63,   62,    1,   64,   65,   64,   66,    1,   65,   65,   66,
	    1,   67,   68,   67,    1,   69,   71,   72,   69,   70,   73,    1,
	   74,   75,    1,   76,    1,   77,   78,   79,   79,   77,   76,    1,
	   80,   82,   83,   80,   81,   84,    1,   83,   84,    1,   85,    1,
	   39,   40,   38,   41,   41,   39,   37,    1,   86,   86,   87,    1,
	   87,    1,   39,   40,   39,   87,    1,   88,   89,   89,   90,   88,
	   91,    1,   90,   91,    1,   92,    1,   93,   94,   95,   95,   93,
	   92,    1,   96,   98,   99,   96,   97,  100,    1,   99,  100,    1,
	  101,    1,  102,  103,  104,  104,  102,  101,    1,  105,  107,  108,
	  105,  106,  109,    1,  108,  109,    1,  110,    1,  111,  112,  113,
	  113,  111,  110,    1,  114,  116,  117,  114,  115,  118,    1,  117,
	  118,    1,  119,    1,  120,  121,  122,  122,  120,  119,    1,  123,
	  125,  126,  123,  124,  127,    1,  128,  129,    1,  130,    1,  131,
	  132,  133,  133,  131,  130,    1,  134,  136,  137,  134,  135,  138,
	    1,  137,  138,    1,  139,    1,   93,   94,   92,   95,   95,   93,
	   91,    1,   98,   97,   97,   99,   98,  100,    1,  102,  103,  101,
	  104,  104,  102,  100,    1,  107,  106,  106,  108,  107,  109,    1,
	  111,  112,  110,  113,  113,  111,  109,    1,  116,  115,  115,  117,
	  116,  118,    1,  120,  121,  119,  122,  122,  120,  118,    1,  125,
	  124,  124,  126,  125,  127,    1,  131,  132,  130,  133,  133,  131,
	  129,    1,  136,  135,  135,  137,  136,  138,    1,  140,  140,  141,
	    1,  141,    1,  142,  143,  143,  144,  142,  145,    1,  146,  147,
	    1,  148,    1,  149,  149,  150,    1,  150,    1,  151,  152,  152,
	  153,  151,  154,    1,  153,  154,    1,  155,    1,  156,  157,  158,
	  158,  156,  155,    1,  159,  161,  162,  159,  160,  163,    1,  162,
	  163,    1,  164,    1,  165,  166,  167,  167,  165,  164,    1,  168,
	  170,  171,  168,  169,  172,    1,  173,  174,    1,  175,    1,  176,
	  177,  178,  178,  176,  175,    1,  179,  181,  182,  179,  180,  183,
	    1,  182,  183,    1,  184,    1,  156,  157,  155,  158,  158,  156,
	  154,    1,  161,  160,  160,  162,  161,  163,    1,  165,  166,  164,
	  167,  167,  165,  163,    1,  170,  169,  169,  171,  170,  172,    1,
	  176,  177,  175,  178,  178,  176,  174,    1,  181,  180,  180,  182,
	  181,  183,    1,  185,  185,  186,    1,  186,    1,  187,  188,  188,
	  189,  187,  190,    1,  189,  190,    1,  191,    1,  192,  193,  194,
	  194,  192,  191,    1,  195,  197,  198,  195,  196,  199,    1,  198,
	  199,    1,  200,    1,  201,  202,  203,  203,  201,  200,    1,  204,
	  206,  207,  204,  205,  208,    1,  209,  210,    1,  211,    1,  212,
	  213,  214,  214,  212,  211,    1,  215,  217,  218,  215,  216,  219,
	    1,  218,  219,    1,  220,    1,  192,  193,  191,  194,  194,  192,
	  190,    1,  197,  196,  196,  198,  197,  199,    1,  201,  202,  200,
	  203,  203,  201,  199,    1,  206,  205,  205,  207,  206,  208,    1,
	  212,  213,  211,  214,  214,  212,  210,    1,  217,  216,  216,  218,
	  217,  219,    1,  221,  221,  222,    1,  222,    1,  223,  224,  224,
	  225,  223,  226,    1,  227,  228,    1,  229,    1,  230,  231,  232,
	  232,  230,  229,    1,  233,  235,  236,  233,  234,  237,    1,  236,
	  237,    1,  238,    1,  230,  231,  229,  232,  232,  230,  228,    1,
	  235,  234,  234,  236,  235,  237,    1,  239,  239,  240,    1,  240,
	    1,  241,  242,  242,  243,  241,  244,    1,  245,  246,    1,  247,
	    1,  248,  248,  249,    1,  249,    1,  250,  250,  251,    1,  251,
	    1,  230,  231,  230,  251,    1,  252,  252,  253,    1,  253,    1,
	  212,  213,  212,  253,    1,  254,  254,  255,    1,  255,    1,  201,
	  202,  201,  255,    1,  256,  256,  257,    1,  257,    1,  192,  193,
	  192,  257,    1,  258,  258,  259,    1,  259,    1,  176,  177,  176,
	  259,    1,  260,  260,  261,    1,  261,    1,  165,  166,  165,  261,
	    1,  262,  262,  263,    1,  263,    1,  156,  157,  156,  263,    1,
	  264,  264,  265,    1,  265,    1,  131,  132,  131,  265,    1,  266,
	  266,  267,    1,  267,    1,  120,  121,  120,  267,    1,  268,  268,
	  269,    1,  269,    1,  111,  112,  111,  269,    1,  270,  270,  271,
	    1,  271,    1,  102,  103,  102,  271,    1,  272,  272,  273,    1,
	  273,    1,   93,   94,   93,  273,    1,  274,  274,  275,    1,  275,
	    1,   82,   81,   81,   83,   82,   84,    1,  276,  276,  277,    1,
	  277,    1,   77,   78,   77,  277,    1,   77,   78,   76,   79,   79,
	   77,   75,    1,   71,   70,   70,   72,   71,   73,    1,  278,  278,
	  279,    1,  279,    1,   56,   57,   56,  279,    1,   56,   57,   55,
	   58,   58,   56,   54,    1,   52,   51,   51,   53,   52,   54,    1,
	  280,  280,  281,    1,  281,    1,   47,   48,   47,  281,    1,   47,
	   48,   46,   49,   49,   47,   45,    1,  282,  282,  283,    1,  283,
	    1,  284,  284,  285,    1,  285,    1,   22,   23,   22,  285,    1,
	  286,  286,  287,    1,  287,    1,   15,   14,   14,   16,   15,   17,
	    1,  288,  288,  289,    1,  289,    1,   10,   11,   10,  289,    1,
	   10,   11,    9,   12,   12,   10,    8,    1,  290,  291,  292,  293,
	  294,  295,  296,  297,  298,  299,  300,  301,  302,  292,  293,  294,
	  295,  296,  297,  298,  299,  300,  301,  302,  290,   18,    1,  303,
	   31,   33,  304,  305,  142,  306,    2,  307,  308,  309,  241,  310,
	  304,  305,  142,  306,    2,  307,  308,  309,  241,  310,  303,   32,
	   34,    1,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
	  321,  322,  323,  313,  314,  315,  316,  317,  318,  319,  320,  321,
	  322,  323,  311,   30,    1,  311,  312,   30,  313,  314,  315,  316,
	  317,  318,  319,  320,  321,  322,  323,  313,  314,  315,  316,  317,
	  318,  319,  320,  321,  322,  323,  311,   29,    1,  324,  325,  326,
	  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  326,  327,
	  328,  329,  330,  331,  332,  333,  334,  335,  336,  324,   85,    1,
	  337,   35,   36,  304,  305,  142,  306,    2,  307,  308,  309,  241,
	  310,  304,  305,  142,  306,    2,  307,  308,  309,  241,  310,  337,
	   37,    1,  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
	  348,  349,  350,  340,  341,  342,  343,  344,  345,  346,  347,  348,
	  349,  350,  338,  139,    1,  351,   88,   90,  304,  305,  142,  306,
	    2,  307,  308,  309,  241,  310,  304,  305,  142,  306,    2,  307,
	  308,  309,  241,  310,  351,   89,   91,    1,  338,  339,  139,  340,
	  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  340,  341,
	  342,  343,  344,  345,  346,  347,  348,  349,  350,  338,  138,    1,
	  338,  339,  340,  341,  343,  344,  345,  346,  347,  348,  349,  350,
	  340,  341,  343,  344,  345,  346,  347,  348,  349,  350,  338,  141,
	    1,  352,  353,  354,  355,  356,  353,  357,  358,  359,  360,  361,
	  362,  363,  354,  355,  356,  353,  357,  358,  359,  360,  361,  362,
	  363,  352,  148,    1,  364,  142,  144,  304,  305,  142,  306,    2,
	  307,  308,  309,  241,  310,  304,  305,  142,  306,    2,  307,  308,
	  309,  241,  310,  364,  143,  145,    1,  352,  353,  148,  354,  355,
	  356,  353,  357,  358,  359,  360,  361,  362,  363,  354,  355,  356,
	  353,  357,  358,  359,  360,  361,  362,  363,  352,  147,    1,  352,
	  353,  354,  355,  353,  357,  358,  359,  360,  361,  362,  363,  354,
	  355,  353,  357,  358,  359,  360,  361,  362,  363,  352,  150,    1,
	  365,  366,  367,  368,  369,  370,  371,  372,  373,  374,  375,  376,
	  377,  367,  368,  369,  370,  371,  372,  373,  374,  375,  376,  377,
	  365,  184,    1,  378,  151,  153,  304,  305,  142,  306,    2,  307,
	  308,  309,  241,  310,  304,  305,  142,  306,    2,  307,  308,  309,
	  241,  310,  378,  152,  154,    1,  365,  366,  184,  367,  368,  369,
	  370,  371,  372,  373,  374,  375,  376,  377,  367,  368,  369,  370,
	  371,  372,  373,  374,  375,  376,  377,  365,  183,    1,  365,  366,
	  367,  368,  370,  371,  372,  373,  374,  375,  376,  377,  367,  368,
	  370,  371,  372,  373,  374,  375,  376,  377,  365,  186,    1,  379,
	  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,  391,
	  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,  391,  379,
	  220,    1,  392,  187,  189,  304,  305,  142,  306,    2,  307,  308,
	  309,  241,  310,  304,  305,  142,  306,    2,  307,  308,  309,  241,
	  310,  392,  188,  190,    1,  379,  380,  220,  381,  382,  383,  384,
	  385,  386,  387,  388,  389,  390,  391,  381,  382,  383,  384,  385,
	  386,  387,  388,  389,  390,  391,  379,  219,    1,  379,  380,  381,
	  382,  384,  385,  386,  387,  388,  389,  390,  391,  381,  382,  384,
	  385,  386,  387,  388,  389,  390,  391,  379,  222,    1,  393,  394,
	  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,  395,
	  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,  393,  238,
	    1,  406,  223,  225,  304,  305,  142,  306,    2,  307,  308,  309,
	  241,  310,  304,  305,  142,  306,    2,  307,  308,  309,  241,  310,
	  406,  224,  226,    1,  393,  394,  238,  395,  396,  397,  398,  399,
	  400,  401,  402,  403,  404,  405,  395,  396,  397,  398,  399,  400,
	  401,  402,  403,  404,  405,  393,  237,    1,  393,  394,  395,  396,
	  398,  399,  400,  401,  402,  403,  404,  405,  395,  396,  398,  399,
	  400,  401,  402,  403,  404,  405,  393,  240,    1,  407,  408,  409,
	  410,  411,  412,  413,  414,  415,  416,  417,  408,  418,  409,  410,
	  411,  412,  413,  414,  415,  416,  417,  408,  418,  407,  247,    1,
	  419,  241,  243,  304,  305,  142,  306,    2,  307,  308,  309,  241,
	  310,  304,  305,  142,  306,    2,  307,  308,  309,  241,  310,  419,
	  242,  244,    1,  407,  408,  247,  409,  410,  411,  412,  413,  414,
	  415,  416,  417,  408,  418,  409,  410,  411,  412,  413,  414,  415,
	  416,  417,  408,  418,  407,  246,    1,  407,  408,  409,  410,  412,
	  413,  414,  415,  416,  417,  408,  418,  409,  410,  412,  413,  414,
	  415,  416,  417,  408,  418,  407,  249,    1,  420,  304,  305,  142,
	  306,    2,  307,  308,  309,  241,  310,  304,  305,  142,  306,    2,
	  307,  308,  309,  241,  310,  420,    1,  324,  325,  326,  327,  329,
	  330,  331,  332,  333,  334,  335,  336,  326,  327,  329,  330,  331,
	  332,  333,  334,  335,  336,  324,  275,    1,  324,  325,   85,  326,
	  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  326,  327,
	  328,  329,  330,  331,  332,  333,  334,  335,  336,  324,   84,    1,
	  311,  312,  313,  314,  316,  317,  318,  319,  320,  321,  322,  323,
	  313,  314,  316,  317,  318,  319,  320,  321,  322,  323,  311,  283,
	    1,  290,  291,  292,  293,  295,  296,  297,  298,  299,  300,  301,
	  302,  292,  293,  295,  296,  297,  298,  299,  300,  301,  302,  290,
	  287,    1,  290,  291,   18,  292,  293,  294,  295,  296,  297,  298,
	  299,  300,  301,  302,  292,  293,  294,  295,  296,  297,  298,  299,
	  300,  301,  302,  290,   17,    1,    0
	};
}

private static final short _path_indicies[] = init__path_indicies_0();


private static short[] init__path_trans_targs_0()
{
	return new short [] {
	    1,    0,    2,    2,    3,    4,  212,    4,  212,    5,    6,  208,
	  209,    6,    7,  208,    8,  248,  213,   10,   16,   11,   12,   17,
	  203,   12,   13,   17,   14,  216,  215,   15,    9,   10,   16,   18,
	   19,   42,   20,   21,   22,   43,   21,   22,   23,  200,   24,   25,
	  196,  197,   25,   26,  196,   27,  195,   28,   29,   30,  192,   29,
	   30,   31,   32,   33,   32,   33,   34,   35,  191,   35,   36,  191,
	   37,  190,   37,  190,   38,   39,  186,  187,   39,   40,  186,   41,
	  245,  217,   44,   45,   46,   47,   48,   69,   49,   50,   70,  181,
	   50,   51,   70,   52,   71,   53,   54,   72,  178,   54,   55,   72,
	   56,   73,   57,   58,   74,  175,   58,   59,   74,   60,   75,   61,
	   62,   76,  172,   62,   63,   76,   64,   77,   64,   77,   65,   66,
	   78,  169,   66,   67,   78,   68,  221,  219,   80,  222,   81,   82,
	   83,  225,   83,  225,  223,   85,  226,   86,   87,   88,  101,   89,
	   90,  102,  166,   90,   91,  102,   92,  103,   93,   94,  104,  163,
	   94,   95,  104,   96,  105,   96,  105,   97,   98,  106,  160,   98,
	   99,  106,  100,  229,  227,  108,  230,  109,  110,  111,  124,  112,
	  113,  125,  157,  113,  114,  125,  115,  126,  116,  117,  127,  154,
	  117,  118,  127,  119,  128,  119,  128,  120,  121,  129,  151,  121,
	  122,  129,  123,  233,  231,  131,  234,  132,  133,  134,  139,  134,
	  139,  135,  136,  140,  148,  136,  137,  140,  138,  237,  235,  142,
	  238,  143,  144,  145,  241,  145,  241,  239,  147,  242,  149,  150,
	  152,  153,  155,  156,  158,  159,  161,  162,  164,  165,  167,  168,
	  170,  171,  173,  174,  176,  177,  179,  180,  182,  183,  185,  244,
	  188,  189,  193,  194,  198,  199,  202,  246,  204,  205,  207,  247,
	  210,  211,  214,   15,   18,   46,  206,   81,   15,    2,   86,  109,
	  132,  143,  243,  214,   18,   46,   15,   86,  109,  132,  243,  214,
	   15,   18,   46,  201,   81,   15,    2,   86,  109,  132,  143,  243,
	  218,   18,   18,   46,  184,   81,   15,    2,   86,  109,  132,  143,
	  243,  218,  220,   46,   18,   46,   79,   81,   15,    2,   86,  109,
	  132,  143,  243,  220,  224,   81,   18,   46,   84,   15,    2,   86,
	  109,  132,  143,  243,  224,  228,   86,   18,   46,  107,   81,   15,
	    2,   86,  109,  132,  143,  243,  228,  232,  109,   18,   46,  130,
	   81,   15,    2,   86,  109,  132,  143,  243,  232,  236,  132,   18,
	   46,  141,   81,   15,    2,   86,  109,  132,  143,  243,  236,  240,
	  143,   18,   46,  146,   81,   15,    2,   86,  109,  132,  243,  240,
	  243
	};
}

private static final short _path_trans_targs[] = init__path_trans_targs_0();


private static byte[] init__path_trans_actions_0()
{
	return new byte [] {
	    0,    0,    5,    0,   36,   36,   36,    1,    1,    1,    3,    3,
	    1,    0,    1,    0,    1,    1,    1,    1,    1,    1,    3,    3,
	    1,    0,    1,    0,    1,    1,    1,    0,   36,   36,   36,    0,
	    1,    1,    1,    3,    3,    1,    0,    0,    1,    1,    1,    3,
	    3,    1,    0,    1,    0,    1,    1,    1,    3,    3,    1,    0,
	    0,    1,    3,    3,    0,    0,    1,    3,    3,    0,   36,    0,
	   36,   36,    1,    1,    1,    3,    3,    1,    0,    1,    0,    1,
	    1,    1,    1,    1,    0,    1,    1,    1,    1,    3,    3,    1,
	    0,    1,    0,    1,    1,    1,    3,    3,    1,    0,    1,    0,
	    1,    1,    1,    3,    3,    1,    0,    1,    0,    1,    1,    1,
	    3,    3,    1,    0,   36,    0,   36,   36,    1,    1,    1,    3,
	    3,    1,    0,    1,    0,    1,    1,    1,    1,    1,    0,   36,
	   36,   36,    1,    1,    1,    1,    1,    0,    1,    1,    1,    1,
	    3,    3,    1,    0,    1,    0,    1,    1,    1,    3,    3,    1,
	    0,   36,    0,   36,   36,    1,    1,    1,    3,    3,    1,    0,
	    1,    0,    1,    1,    1,    1,    1,    0,    1,    1,    1,    1,
	    3,    3,    1,    0,    1,    0,    1,    1,    1,    3,    3,    1,
	    0,   36,    0,   36,   36,    1,    1,    1,    3,    3,    1,    0,
	    1,    0,    1,    1,    1,    1,    1,    0,   36,   36,   36,    1,
	    1,    1,    3,    3,    1,    0,    1,    0,    1,    1,    1,    1,
	    1,    0,   36,   36,   36,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    9,    9,   39,   39,    1,    9,   39,   39,   39,   39,
	   39,    9,   43,    0,    5,    5,    5,    5,    5,    5,    7,   12,
	   12,   47,   47,    1,   12,   47,   47,   47,   47,   47,   12,   51,
	   33,   33,  103,  103,    1,   33,  103,  103,  103,  103,  103,   33,
	  107,    0,   21,   21,   71,   71,    1,   21,   71,   71,   71,   71,
	   71,   21,   75,    0,   15,   15,   55,   55,    1,   55,   55,   55,
	   55,   55,   15,   59,    0,   27,   27,   87,   87,    1,   27,   87,
	   87,   87,   87,   87,   27,   91,    0,   24,   24,   79,   79,    1,
	   24,   79,   79,   79,   79,   79,   24,   83,    0,   30,   30,   95,
	   95,    1,   30,   95,   95,   95,   95,   95,   30,   99,    0,   18,
	   18,   63,   63,    1,   18,   63,   63,   63,   63,   63,   67,    0,
	    0
	};
}

private static final byte _path_trans_actions[] = init__path_trans_actions_0();


private static byte[] init__path_eof_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    9,    0,   12,
	   12,   33,    0,   21,    0,   21,   21,   15,    0,   15,   15,   27,
	    0,   27,   27,   24,    0,   24,   24,   30,    0,   30,   30,   18,
	    0,   18,   18,    0,   33,   33,   12,    9,    9
	};
}

private static final byte _path_eof_actions[] = init__path_eof_actions_0();


static final int path_start = 1;
static final int path_first_final = 213;
static final int path_error = 0;

static final int path_en_main = 1;

// line 215 "src/main/ragel/PathParser.rl"

	final GeneralPath parse(final CharSequence data) throws ParseException {
		return parse(data.toString().toCharArray());
	}

	final GeneralPath parse(final char[] data) throws ParseException {
		final PathBuilder pb = new PathBuilder();
		if(data == null)
			return pb.toPath();
		// high-level buffers
		final StringBuilder buf = new StringBuilder();
		final float[] argv = new float[7];
		int argc = 0;
		boolean absolute = true;		
		
		// ragel variables (low level)
		final int pe = data.length;
		final int eof = pe;
		int cs, p = 0;
		int top;

		
// line 693 "src/main/java/org/piccolo2d/svg/PathParser.java"
	{
	cs = path_start;
	}
// line 237 "src/main/ragel/PathParser.rl"
		
// line 699 "src/main/java/org/piccolo2d/svg/PathParser.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _path_key_offsets[cs];
	_trans = _path_index_offsets[cs];
	_klen = _path_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _path_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _path_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _path_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _path_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _path_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _path_indicies[_trans];
	cs = _path_trans_targs[_trans];

	if ( _path_trans_actions[_trans] != 0 ) {
		_acts = _path_trans_actions[_trans];
		_nacts = (int) _path_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _path_actions[_acts++] )
			{
	case 0:
// line 48 "src/main/ragel/PathParser.rl"
	{
		/* add the character to the buffer. */
		buf.append(data[p]);
	}
	break;
	case 1:
// line 52 "src/main/ragel/PathParser.rl"
	{
		/* parse the buffer. */		
		argv[argc++] = Float.parseFloat(buf.toString());
		buf.setLength(0);
	}
	break;
	case 2:
// line 57 "src/main/ragel/PathParser.rl"
	{
		//System.out.println(data[p]);
		absolute = data[p] <= 'Z';
	}
	break;
	case 3:
// line 61 "src/main/ragel/PathParser.rl"
	{
		argc = 0;
	}
	break;
	case 4:
// line 65 "src/main/ragel/PathParser.rl"
	{
		pb.closePath();		
	}
	break;
	case 5:
// line 68 "src/main/ragel/PathParser.rl"
	{
		pb.moveTo(absolute, argv[0], argv[1]);
	}
	break;
	case 6:
// line 71 "src/main/ragel/PathParser.rl"
	{
		pb.lineTo(absolute, argv[0], argv[1]);
	}
	break;
	case 7:
// line 74 "src/main/ragel/PathParser.rl"
	{
		pb.hlineTo(absolute, argv[0]);
	}
	break;
	case 8:
// line 77 "src/main/ragel/PathParser.rl"
	{
		pb.vlineTo(absolute, argv[0]);
	}
	break;
	case 9:
// line 80 "src/main/ragel/PathParser.rl"
	{
		// I have no idea why this is not sequential...
		pb.cubicTo(absolute, argv[2], argv[3], argv[4], argv[5], argv[0], argv[1]);
	}
	break;
	case 10:
// line 84 "src/main/ragel/PathParser.rl"
	{
		// I have no idea why this is not sequential...
		pb.smoothCubicTo(absolute, argv[2], argv[3], argv[0], argv[1]);
	}
	break;
	case 11:
// line 88 "src/main/ragel/PathParser.rl"
	{
		// I have no idea why this is not sequential...
		pb.quadTo(absolute, argv[2], argv[3], argv[0], argv[1]);
	}
	break;
	case 12:
// line 92 "src/main/ragel/PathParser.rl"
	{
		pb.smoothQuadTo(absolute, argv[0], argv[1]);
	}
	break;
	case 13:
// line 95 "src/main/ragel/PathParser.rl"
	{
		System.out.println("arc: TODO");		
	}
	break;
// line 870 "src/main/java/org/piccolo2d/svg/PathParser.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _path_eof_actions[cs];
	int __nacts = (int) _path_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _path_actions[__acts++] ) {
	case 1:
// line 52 "src/main/ragel/PathParser.rl"
	{
		/* parse the buffer. */		
		argv[argc++] = Float.parseFloat(buf.toString());
		buf.setLength(0);
	}
	break;
	case 5:
// line 68 "src/main/ragel/PathParser.rl"
	{
		pb.moveTo(absolute, argv[0], argv[1]);
	}
	break;
	case 6:
// line 71 "src/main/ragel/PathParser.rl"
	{
		pb.lineTo(absolute, argv[0], argv[1]);
	}
	break;
	case 7:
// line 74 "src/main/ragel/PathParser.rl"
	{
		pb.hlineTo(absolute, argv[0]);
	}
	break;
	case 8:
// line 77 "src/main/ragel/PathParser.rl"
	{
		pb.vlineTo(absolute, argv[0]);
	}
	break;
	case 9:
// line 80 "src/main/ragel/PathParser.rl"
	{
		// I have no idea why this is not sequential...
		pb.cubicTo(absolute, argv[2], argv[3], argv[4], argv[5], argv[0], argv[1]);
	}
	break;
	case 10:
// line 84 "src/main/ragel/PathParser.rl"
	{
		// I have no idea why this is not sequential...
		pb.smoothCubicTo(absolute, argv[2], argv[3], argv[0], argv[1]);
	}
	break;
	case 11:
// line 88 "src/main/ragel/PathParser.rl"
	{
		// I have no idea why this is not sequential...
		pb.quadTo(absolute, argv[2], argv[3], argv[0], argv[1]);
	}
	break;
	case 12:
// line 92 "src/main/ragel/PathParser.rl"
	{
		pb.smoothQuadTo(absolute, argv[0], argv[1]);
	}
	break;
	case 13:
// line 95 "src/main/ragel/PathParser.rl"
	{
		System.out.println("arc: TODO");		
	}
	break;
// line 956 "src/main/java/org/piccolo2d/svg/PathParser.java"
		}
	}
	}

case 5:
	}
	break; }
	}
// line 238 "src/main/ragel/PathParser.rl"

		if ( cs < path_first_final )
			throw new ParseException(new String(data), p);
        return pb.toPath();
	}
}
