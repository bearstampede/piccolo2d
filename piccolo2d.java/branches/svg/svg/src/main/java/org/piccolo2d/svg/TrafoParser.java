// line 1 "src/main/ragel/TrafoParser.rl"
/*
 * Copyright (c) 2008, Piccolo2D project, http://piccolo2d.org
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of conditions
 * and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions
 * and the following disclaimer in the documentation and/or other materials provided with the
 * distribution.
 *
 * None of the name of the Piccolo2D project, the University of Maryland, or the names of its contributors
 * may be used to endorse or promote products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.piccolo2d.svg;

import java.awt.geom.AffineTransform;
import java.text.ParseException;

/** <a href="http://research.cs.queensu.ca/~thurston/ragel/">Ragel</a> parser 
 * for <a href="http://www.w3.org/TR/SVG11/coords.html#TransformAttribute">transform attribute</a> - This file is auto-generated by rl2java.sh.
 * <p>
 * DO NOT EDIT MANUALLY!!!
 * </p>
 */
class TrafoParser implements RagelParser {
// line 139 "src/main/ragel/TrafoParser.rl"



// line 46 "src/main/java/org/piccolo2d/svg/TrafoParser.java"
private static byte[] init__trafo_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    2,    1,    3,    1,    4,    1,    5,    1,
	    6,    1,    7,    1,    8,    1,    9,    2,    3,    0,    2,    3,
	    1
	};
}

private static final byte _trafo_actions[] = init__trafo_actions_0();


private static short[] init__trafo_key_offsets_0()
{
	return new short [] {
	    0,    0,    1,    2,    3,    4,    5,    9,   17,   20,   22,   30,
	   39,   42,   44,   52,   61,   64,   66,   74,   83,   86,   88,   96,
	  105,  108,  110,  118,  127,  130,  132,  140,  144,  152,  153,  154,
	  155,  156,  157,  161,  169,  172,  174,  183,  193,  196,  198,  206,
	  215,  218,  220,  228,  232,  236,  238,  244,  253,  261,  265,  267,
	  273,  282,  290,  294,  296,  303,  313,  315,  316,  317,  318,  322,
	  330,  333,  335,  344,  354,  357,  359,  367,  371,  375,  377,  383,
	  392,  400,  404,  406,  413,  423,  424,  425,  427,  431,  439,  442,
	  444,  452,  456,  460,  462,  468,  477,  481,  489,  492,  494,  502,
	  506,  510,  512,  518,  527,  528,  529,  530,  531,  532,  533,  534,
	  535,  539,  547,  550,  552,  561,  571,  574,  576,  584,  588,  592,
	  594,  600,  609,  617,  621,  623,  630,  640,  644,  646,  652,  661,
	  669,  673,  675,  681,  690,  698,  702,  704,  710,  719,  727,  731,
	  733,  739,  748,  756,  760,  762,  768,  777,  785,  789,  791,  797,
	  806,  813,  817,  825,  829,  833,  837,  841
	};
}

private static final short _trafo_key_offsets[] = init__trafo_key_offsets_0();


private static char[] init__trafo_trans_keys_0()
{
	return new char [] {
	   97,  116,  114,  105,  120,   32,   40,    9,   13,   32,   43,   45,
	   46,    9,   13,   48,   57,   46,   48,   57,   48,   57,   32,   44,
	   69,  101,    9,   13,   48,   57,   32,   44,   46,    9,   13,   43,
	   45,   48,   57,   46,   48,   57,   48,   57,   32,   44,   69,  101,
	    9,   13,   48,   57,   32,   44,   46,    9,   13,   43,   45,   48,
	   57,   46,   48,   57,   48,   57,   32,   44,   69,  101,    9,   13,
	   48,   57,   32,   44,   46,    9,   13,   43,   45,   48,   57,   46,
	   48,   57,   48,   57,   32,   44,   69,  101,    9,   13,   48,   57,
	   32,   44,   46,    9,   13,   43,   45,   48,   57,   46,   48,   57,
	   48,   57,   32,   44,   69,  101,    9,   13,   48,   57,   32,   44,
	   46,    9,   13,   43,   45,   48,   57,   46,   48,   57,   48,   57,
	   32,   41,   69,  101,    9,   13,   48,   57,   32,   41,    9,   13,
	   32,   44,  109,  114,  115,  116,    9,   13,  111,  116,   97,  116,
	  101,   32,   40,    9,   13,   32,   43,   45,   46,    9,   13,   48,
	   57,   46,   48,   57,   48,   57,   32,   41,   44,   69,  101,    9,
	   13,   48,   57,   32,   41,   44,   46,    9,   13,   43,   45,   48,
	   57,   46,   48,   57,   48,   57,   32,   44,   69,  101,    9,   13,
	   48,   57,   32,   44,   46,    9,   13,   43,   45,   48,   57,   46,
	   48,   57,   48,   57,   32,   41,   69,  101,    9,   13,   48,   57,
	   32,   41,    9,   13,   43,   45,   48,   57,   48,   57,   32,   41,
	    9,   13,   48,   57,   32,   41,   46,   69,  101,    9,   13,   48,
	   57,   32,   43,   45,   46,    9,   13,   48,   57,   43,   45,   48,
	   57,   48,   57,   32,   44,    9,   13,   48,   57,   32,   44,   46,
	   69,  101,    9,   13,   48,   57,   32,   43,   45,   46,    9,   13,
	   48,   57,   43,   45,   48,   57,   48,   57,   32,   41,   44,    9,
	   13,   48,   57,   32,   41,   44,   46,   69,  101,    9,   13,   48,
	   57,   99,  107,   97,  108,  101,   32,   40,    9,   13,   32,   43,
	   45,   46,    9,   13,   48,   57,   46,   48,   57,   48,   57,   32,
	   41,   44,   69,  101,    9,   13,   48,   57,   32,   41,   44,   46,
	    9,   13,   43,   45,   48,   57,   46,   48,   57,   48,   57,   32,
	   41,   69,  101,    9,   13,   48,   57,   32,   41,    9,   13,   43,
	   45,   48,   57,   48,   57,   32,   41,    9,   13,   48,   57,   32,
	   41,   46,   69,  101,    9,   13,   48,   57,   32,   43,   45,   46,
	    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,   32,   41,
	   44,    9,   13,   48,   57,   32,   41,   44,   46,   69,  101,    9,
	   13,   48,   57,  101,  119,   88,   89,   32,   40,    9,   13,   32,
	   43,   45,   46,    9,   13,   48,   57,   46,   48,   57,   48,   57,
	   32,   41,   69,  101,    9,   13,   48,   57,   32,   41,    9,   13,
	   43,   45,   48,   57,   48,   57,   32,   41,    9,   13,   48,   57,
	   32,   41,   46,   69,  101,    9,   13,   48,   57,   32,   40,    9,
	   13,   32,   43,   45,   46,    9,   13,   48,   57,   46,   48,   57,
	   48,   57,   32,   41,   69,  101,    9,   13,   48,   57,   32,   41,
	    9,   13,   43,   45,   48,   57,   48,   57,   32,   41,    9,   13,
	   48,   57,   32,   41,   46,   69,  101,    9,   13,   48,   57,  114,
	   97,  110,  115,  108,   97,  116,  101,   32,   40,    9,   13,   32,
	   43,   45,   46,    9,   13,   48,   57,   46,   48,   57,   48,   57,
	   32,   41,   44,   69,  101,    9,   13,   48,   57,   32,   41,   44,
	   46,    9,   13,   43,   45,   48,   57,   46,   48,   57,   48,   57,
	   32,   41,   69,  101,    9,   13,   48,   57,   32,   41,    9,   13,
	   43,   45,   48,   57,   48,   57,   32,   41,    9,   13,   48,   57,
	   32,   41,   46,   69,  101,    9,   13,   48,   57,   32,   43,   45,
	   46,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,   32,
	   41,   44,    9,   13,   48,   57,   32,   41,   44,   46,   69,  101,
	    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,   32,   41,
	    9,   13,   48,   57,   32,   41,   46,   69,  101,    9,   13,   48,
	   57,   32,   43,   45,   46,    9,   13,   48,   57,   43,   45,   48,
	   57,   48,   57,   32,   44,    9,   13,   48,   57,   32,   44,   46,
	   69,  101,    9,   13,   48,   57,   32,   43,   45,   46,    9,   13,
	   48,   57,   43,   45,   48,   57,   48,   57,   32,   44,    9,   13,
	   48,   57,   32,   44,   46,   69,  101,    9,   13,   48,   57,   32,
	   43,   45,   46,    9,   13,   48,   57,   43,   45,   48,   57,   48,
	   57,   32,   44,    9,   13,   48,   57,   32,   44,   46,   69,  101,
	    9,   13,   48,   57,   32,   43,   45,   46,    9,   13,   48,   57,
	   43,   45,   48,   57,   48,   57,   32,   44,    9,   13,   48,   57,
	   32,   44,   46,   69,  101,    9,   13,   48,   57,   32,   43,   45,
	   46,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,   32,
	   44,    9,   13,   48,   57,   32,   44,   46,   69,  101,    9,   13,
	   48,   57,   32,  109,  114,  115,  116,    9,   13,   32,   44,    9,
	   13,   32,   44,  109,  114,  115,  116,    9,   13,   32,   44,    9,
	   13,   32,   44,    9,   13,   32,   44,    9,   13,   32,   44,    9,
	   13,   32,   44,    9,   13,    0
	};
}

private static final char _trafo_trans_keys[] = init__trafo_trans_keys_0();


private static byte[] init__trafo_single_lengths_0()
{
	return new byte [] {
	    0,    1,    1,    1,    1,    1,    2,    4,    1,    0,    4,    3,
	    1,    0,    4,    3,    1,    0,    4,    3,    1,    0,    4,    3,
	    1,    0,    4,    3,    1,    0,    4,    2,    6,    1,    1,    1,
	    1,    1,    2,    4,    1,    0,    5,    4,    1,    0,    4,    3,
	    1,    0,    4,    2,    2,    0,    2,    5,    4,    2,    0,    2,
	    5,    4,    2,    0,    3,    6,    2,    1,    1,    1,    2,    4,
	    1,    0,    5,    4,    1,    0,    4,    2,    2,    0,    2,    5,
	    4,    2,    0,    3,    6,    1,    1,    2,    2,    4,    1,    0,
	    4,    2,    2,    0,    2,    5,    2,    4,    1,    0,    4,    2,
	    2,    0,    2,    5,    1,    1,    1,    1,    1,    1,    1,    1,
	    2,    4,    1,    0,    5,    4,    1,    0,    4,    2,    2,    0,
	    2,    5,    4,    2,    0,    3,    6,    2,    0,    2,    5,    4,
	    2,    0,    2,    5,    4,    2,    0,    2,    5,    4,    2,    0,
	    2,    5,    4,    2,    0,    2,    5,    4,    2,    0,    2,    5,
	    5,    2,    6,    2,    2,    2,    2,    2
	};
}

private static final byte _trafo_single_lengths[] = init__trafo_single_lengths_0();


private static byte[] init__trafo_range_lengths_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    1,    2,    1,    1,    2,    3,
	    1,    1,    2,    3,    1,    1,    2,    3,    1,    1,    2,    3,
	    1,    1,    2,    3,    1,    1,    2,    1,    1,    0,    0,    0,
	    0,    0,    1,    2,    1,    1,    2,    3,    1,    1,    2,    3,
	    1,    1,    2,    1,    1,    1,    2,    2,    2,    1,    1,    2,
	    2,    2,    1,    1,    2,    2,    0,    0,    0,    0,    1,    2,
	    1,    1,    2,    3,    1,    1,    2,    1,    1,    1,    2,    2,
	    2,    1,    1,    2,    2,    0,    0,    0,    1,    2,    1,    1,
	    2,    1,    1,    1,    2,    2,    1,    2,    1,    1,    2,    1,
	    1,    1,    2,    2,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    2,    1,    1,    2,    3,    1,    1,    2,    1,    1,    1,
	    2,    2,    2,    1,    1,    2,    2,    1,    1,    2,    2,    2,
	    1,    1,    2,    2,    2,    1,    1,    2,    2,    2,    1,    1,
	    2,    2,    2,    1,    1,    2,    2,    2,    1,    1,    2,    2,
	    1,    1,    1,    1,    1,    1,    1,    1
	};
}

private static final byte _trafo_range_lengths[] = init__trafo_range_lengths_0();


private static short[] init__trafo_index_offsets_0()
{
	return new short [] {
	    0,    0,    2,    4,    6,    8,   10,   14,   21,   24,   26,   33,
	   40,   43,   45,   52,   59,   62,   64,   71,   78,   81,   83,   90,
	   97,  100,  102,  109,  116,  119,  121,  128,  132,  140,  142,  144,
	  146,  148,  150,  154,  161,  164,  166,  174,  182,  185,  187,  194,
	  201,  204,  206,  213,  217,  221,  223,  228,  236,  243,  247,  249,
	  254,  262,  269,  273,  275,  281,  290,  293,  295,  297,  299,  303,
	  310,  313,  315,  323,  331,  334,  336,  343,  347,  351,  353,  358,
	  366,  373,  377,  379,  385,  394,  396,  398,  401,  405,  412,  415,
	  417,  424,  428,  432,  434,  439,  447,  451,  458,  461,  463,  470,
	  474,  478,  480,  485,  493,  495,  497,  499,  501,  503,  505,  507,
	  509,  513,  520,  523,  525,  533,  541,  544,  546,  553,  557,  561,
	  563,  568,  576,  583,  587,  589,  595,  604,  608,  610,  615,  623,
	  630,  634,  636,  641,  649,  656,  660,  662,  667,  675,  682,  686,
	  688,  693,  701,  708,  712,  714,  719,  727,  734,  738,  740,  745,
	  753,  760,  764,  772,  776,  780,  784,  788
	};
}

private static final short _trafo_index_offsets[] = init__trafo_index_offsets_0();


private static short[] init__trafo_indicies_0()
{
	return new short [] {
	    0,    1,    2,    1,    3,    1,    4,    1,    5,    1,    5,    6,
	    5,    1,    6,    7,    7,    8,    6,    9,    1,    8,    9,    1,
	   10,    1,   11,   12,   13,   13,   11,   10,    1,   14,   16,   17,
	   14,   15,   18,    1,   17,   18,    1,   19,    1,   20,   21,   22,
	   22,   20,   19,    1,   23,   25,   26,   23,   24,   27,    1,   26,
	   27,    1,   28,    1,   29,   30,   31,   31,   29,   28,    1,   32,
	   34,   35,   32,   33,   36,    1,   35,   36,    1,   37,    1,   38,
	   39,   40,   40,   38,   37,    1,   41,   43,   44,   41,   42,   45,
	    1,   44,   45,    1,   46,    1,   47,   48,   49,   49,   47,   46,
	    1,   50,   52,   53,   50,   51,   54,    1,   53,   54,    1,   55,
	    1,   56,   57,   58,   58,   56,   55,    1,   59,   60,   59,    1,
	   61,   61,   62,   63,   64,   65,   61,    1,   66,    1,   67,    1,
	   68,    1,   69,    1,   70,    1,   70,   71,   70,    1,   71,   72,
	   72,   73,   71,   74,    1,   73,   74,    1,   75,    1,   76,   77,
	   78,   79,   79,   76,   75,    1,   80,   81,   83,   84,   80,   82,
	   85,    1,   84,   85,    1,   86,    1,   87,   88,   89,   89,   87,
	   86,    1,   90,   92,   93,   90,   91,   94,    1,   93,   94,    1,
	   95,    1,   96,   77,   97,   97,   96,   95,    1,   98,   81,   98,
	    1,   99,   99,  100,    1,  100,    1,   96,   77,   96,  100,    1,
	   96,   77,   95,   97,   97,   96,   94,    1,   92,   91,   91,   93,
	   92,   94,    1,  101,  101,  102,    1,  102,    1,   87,   88,   87,
	  102,    1,   87,   88,   86,   89,   89,   87,   85,    1,   83,   82,
	   82,   84,   83,   85,    1,  103,  103,  104,    1,  104,    1,   76,
	   77,   78,   76,  104,    1,   76,   77,   78,   75,   79,   79,   76,
	   74,    1,  105,  106,    1,  107,    1,  108,    1,  109,    1,  109,
	  110,  109,    1,  110,  111,  111,  112,  110,  113,    1,  112,  113,
	    1,  114,    1,  115,  116,  117,  118,  118,  115,  114,    1,  119,
	  120,  122,  123,  119,  121,  124,    1,  123,  124,    1,  125,    1,
	  126,  127,  128,  128,  126,  125,    1,  129,  120,  129,    1,  130,
	  130,  131,    1,  131,    1,  126,  127,  126,  131,    1,  126,  127,
	  125,  128,  128,  126,  124,    1,  122,  121,  121,  123,  122,  124,
	    1,  132,  132,  133,    1,  133,    1,  115,  116,  117,  115,  133,
	    1,  115,  116,  117,  114,  118,  118,  115,  113,    1,  134,    1,
	  135,    1,  136,  137,    1,  136,  138,  136,    1,  138,  139,  139,
	  140,  138,  141,    1,  140,  141,    1,  142,    1,  143,  144,  145,
	  145,  143,  142,    1,  146,  147,  146,    1,  148,  148,  149,    1,
	  149,    1,  143,  144,  143,  149,    1,  143,  144,  142,  145,  145,
	  143,  141,    1,  137,  150,  137,    1,  150,  151,  151,  152,  150,
	  153,    1,  152,  153,    1,  154,    1,  155,  156,  157,  157,  155,
	  154,    1,  158,  159,  158,    1,  160,  160,  161,    1,  161,    1,
	  155,  156,  155,  161,    1,  155,  156,  154,  157,  157,  155,  153,
	    1,  162,    1,  163,    1,  164,    1,  165,    1,  166,    1,  167,
	    1,  168,    1,  169,    1,  169,  170,  169,    1,  170,  171,  171,
	  172,  170,  173,    1,  172,  173,    1,  174,    1,  175,  176,  177,
	  178,  178,  175,  174,    1,  179,  180,  182,  183,  179,  181,  184,
	    1,  183,  184,    1,  185,    1,  186,  187,  188,  188,  186,  185,
	    1,  189,  180,  189,    1,  190,  190,  191,    1,  191,    1,  186,
	  187,  186,  191,    1,  186,  187,  185,  188,  188,  186,  184,    1,
	  182,  181,  181,  183,  182,  184,    1,  192,  192,  193,    1,  193,
	    1,  175,  176,  177,  175,  193,    1,  175,  176,  177,  174,  178,
	  178,  175,  173,    1,  194,  194,  195,    1,  195,    1,   56,   57,
	   56,  195,    1,   56,   57,   55,   58,   58,   56,   54,    1,   52,
	   51,   51,   53,   52,   54,    1,  196,  196,  197,    1,  197,    1,
	   47,   48,   47,  197,    1,   47,   48,   46,   49,   49,   47,   45,
	    1,   43,   42,   42,   44,   43,   45,    1,  198,  198,  199,    1,
	  199,    1,   38,   39,   38,  199,    1,   38,   39,   37,   40,   40,
	   38,   36,    1,   34,   33,   33,   35,   34,   36,    1,  200,  200,
	  201,    1,  201,    1,   29,   30,   29,  201,    1,   29,   30,   28,
	   31,   31,   29,   27,    1,   25,   24,   24,   26,   25,   27,    1,
	  202,  202,  203,    1,  203,    1,   20,   21,   20,  203,    1,   20,
	   21,   19,   22,   22,   20,   18,    1,   16,   15,   15,   17,   16,
	   18,    1,  204,  204,  205,    1,  205,    1,   11,   12,   11,  205,
	    1,   11,   12,   10,   13,   13,   11,    9,    1,  206,   62,   63,
	   64,   65,  206,    1,  207,  208,  207,    1,  209,   61,   62,   63,
	   64,   65,  209,    1,  210,  211,  210,    1,  212,  213,  212,    1,
	  214,  215,  214,    1,  216,  217,  216,    1,  218,  219,  218,    1,
	    0
	};
}

private static final short _trafo_indicies[] = init__trafo_indicies_0();


private static short[] init__trafo_trans_targs_0()
{
	return new short [] {
	    2,    0,    3,    4,    5,    6,    7,    8,    9,  167,   10,   11,
	  163,  164,   11,   12,  163,   13,  162,   14,   15,  158,  159,   15,
	   16,  158,   17,  157,   18,   19,  153,  154,   19,   20,  153,   21,
	  152,   22,   23,  148,  149,   23,   24,  148,   25,  147,   26,   27,
	  143,  144,   27,   28,  143,   29,  142,   30,   31,  169,  139,   31,
	  169,   32,    1,   33,   66,  112,   34,   35,   36,   37,   38,   39,
	   40,   41,   65,   42,   43,  171,   61,   62,   43,  171,   44,   61,
	   45,   60,   46,   47,   56,   57,   47,   48,   56,   49,   55,   50,
	   51,   52,   51,   53,   54,   58,   59,   63,   64,   67,   89,   68,
	   69,   70,   71,   72,   73,   88,   74,   75,  172,   84,   85,   75,
	  172,   76,   84,   77,   83,   78,   79,  172,   80,   79,   81,   82,
	   86,   87,   90,   91,   92,  102,   93,   94,   95,  101,   96,   97,
	  173,   98,   97,  173,   99,  100,  103,  104,  105,  111,  106,  107,
	  174,  108,  107,  174,  109,  110,  113,  114,  115,  116,  117,  118,
	  119,  120,  121,  122,  123,  138,  124,  125,  175,  134,  135,  125,
	  175,  126,  134,  127,  133,  128,  129,  175,  130,  129,  131,  132,
	  136,  137,  140,  141,  145,  146,  150,  151,  155,  156,  160,  161,
	  165,  166,  168,  170,   32,  170,  170,   32,  170,   32,  170,   32,
	  170,   32,  170,   32
	};
}

private static final short _trafo_trans_targs[] = init__trafo_trans_targs_0();


private static byte[] init__trafo_trans_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    3,    0,    3,    3,    5,
	    5,    0,    0,    3,    0,    0,    3,    3,    5,    5,    0,    0,
	    3,    0,    0,    3,    3,    5,    5,    0,    0,    3,    0,    0,
	    3,    3,    5,    5,    0,    0,    3,    0,    0,    3,    3,    5,
	    5,    0,    0,    3,    0,    0,    3,    3,    5,   19,    0,    0,
	    1,    0,    0,    1,    1,    1,    0,    0,    0,    0,    0,    0,
	    3,    0,    3,    3,    5,    5,    5,    0,    0,    0,    3,    0,
	    0,    3,    3,   22,   22,    0,    0,    3,    0,    0,    3,    3,
	    5,    0,    0,    0,    3,    0,    3,    0,    3,    0,    0,    0,
	    0,    0,    0,    3,    0,    3,    3,    5,    5,    5,    0,    0,
	    0,    3,    0,    0,    3,    3,   22,   22,    0,    0,    0,    3,
	    0,    3,    0,    0,    0,    0,    0,    3,    0,    3,    3,    5,
	   19,    0,    0,    1,    0,    3,    0,    3,    0,    3,    3,    5,
	   19,    0,    0,    1,    0,    3,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    3,    0,    3,    3,    5,    5,    5,    0,    0,
	    0,    3,    0,    0,    3,    3,   22,   22,    0,    0,    0,    3,
	    0,    3,    0,    3,    0,    3,    0,    3,    0,    3,    0,    3,
	    0,    3,    0,   17,   17,    0,   11,   11,   13,   13,    7,    7,
	    9,    9,   15,   15
	};
}

private static final byte _trafo_trans_actions[] = init__trafo_trans_actions_0();


private static byte[] init__trafo_eof_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   17,    0,   11,   13,    7,    9,   15
	};
}

private static final byte _trafo_eof_actions[] = init__trafo_eof_actions_0();


static final int trafo_start = 168;
static final int trafo_first_final = 168;
static final int trafo_error = 0;

static final int trafo_en_main = 168;

// line 142 "src/main/ragel/TrafoParser.rl"

	final AffineTransform parse(final CharSequence data, final AffineTransform t) throws ParseException {
		return parse(data == null ? null : data.toString().toCharArray(), t);
	}

	final AffineTransform parse(final char[] data, AffineTransform t) throws ParseException {
		if(t == null)
			t = new AffineTransform();
		if(data == null)
			return t;
		// high-level buffers
		boolean two = false;
		final StringBuilder buf = new StringBuilder();
		final double[] argv = new double[6];
		int argc = 0;
		
		// ragel variables (low level)
		final int pe = data.length;
		final int eof = pe;
		int cs, p = 0;
		int top;

		
// line 421 "src/main/java/org/piccolo2d/svg/TrafoParser.java"
	{
	cs = trafo_start;
	}
// line 165 "src/main/ragel/TrafoParser.rl"
		
// line 427 "src/main/java/org/piccolo2d/svg/TrafoParser.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _trafo_key_offsets[cs];
	_trans = _trafo_index_offsets[cs];
	_klen = _trafo_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _trafo_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _trafo_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _trafo_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _trafo_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _trafo_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _trafo_indicies[_trans];
	cs = _trafo_trans_targs[_trans];

	if ( _trafo_trans_actions[_trans] != 0 ) {
		_acts = _trafo_trans_actions[_trans];
		_nacts = (int) _trafo_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _trafo_actions[_acts++] )
			{
	case 0:
// line 48 "src/main/ragel/TrafoParser.rl"
	{
		two = false;
		argc = 0;
	}
	break;
	case 1:
// line 53 "src/main/ragel/TrafoParser.rl"
	{
		two = true;
	}
	break;
	case 2:
// line 57 "src/main/ragel/TrafoParser.rl"
	{
		buf.append(data[p]);
	}
	break;
	case 3:
// line 61 "src/main/ragel/TrafoParser.rl"
	{
		argv[argc++] = Double.parseDouble(buf.toString());
		buf.setLength(0);
	}
	break;
	case 4:
// line 66 "src/main/ragel/TrafoParser.rl"
	{
		if(true)
			throw new UnsupportedOperationException("Not implemented yet.");
	}
	break;
	case 5:
// line 71 "src/main/ragel/TrafoParser.rl"
	{
		if(true)
			throw new UnsupportedOperationException("Not implemented yet.");
	}
	break;
	case 6:
// line 76 "src/main/ragel/TrafoParser.rl"
	{
		argv[0] *= Math.PI / 180;
		if(!two) 
			t.rotate(argv[0]);
		else
			t.rotate(argv[0], argv[1], argv[2]);
	}
	break;
	case 7:
// line 84 "src/main/ragel/TrafoParser.rl"
	{
		if(!two)
			argv[1] = argv[0];
		t.scale(argv[0], argv[1]);
	}
	break;
	case 8:
// line 90 "src/main/ragel/TrafoParser.rl"
	{
		if(!two)
			argv[1] = argv[0];
		t.translate(argv[0], argv[1]);
	}
	break;
	case 9:
// line 96 "src/main/ragel/TrafoParser.rl"
	{
		t.preConcatenate(new AffineTransform(argv));
	}
	break;
// line 579 "src/main/java/org/piccolo2d/svg/TrafoParser.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _trafo_eof_actions[cs];
	int __nacts = (int) _trafo_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _trafo_actions[__acts++] ) {
	case 4:
// line 66 "src/main/ragel/TrafoParser.rl"
	{
		if(true)
			throw new UnsupportedOperationException("Not implemented yet.");
	}
	break;
	case 5:
// line 71 "src/main/ragel/TrafoParser.rl"
	{
		if(true)
			throw new UnsupportedOperationException("Not implemented yet.");
	}
	break;
	case 6:
// line 76 "src/main/ragel/TrafoParser.rl"
	{
		argv[0] *= Math.PI / 180;
		if(!two) 
			t.rotate(argv[0]);
		else
			t.rotate(argv[0], argv[1], argv[2]);
	}
	break;
	case 7:
// line 84 "src/main/ragel/TrafoParser.rl"
	{
		if(!two)
			argv[1] = argv[0];
		t.scale(argv[0], argv[1]);
	}
	break;
	case 8:
// line 90 "src/main/ragel/TrafoParser.rl"
	{
		if(!two)
			argv[1] = argv[0];
		t.translate(argv[0], argv[1]);
	}
	break;
	case 9:
// line 96 "src/main/ragel/TrafoParser.rl"
	{
		t.preConcatenate(new AffineTransform(argv));
	}
	break;
// line 646 "src/main/java/org/piccolo2d/svg/TrafoParser.java"
		}
	}
	}

case 5:
	}
	break; }
	}
// line 166 "src/main/ragel/TrafoParser.rl"

		if ( cs < trafo_first_final )
			throw new ParseException(new String(data), p);
        return t;
	}
}
