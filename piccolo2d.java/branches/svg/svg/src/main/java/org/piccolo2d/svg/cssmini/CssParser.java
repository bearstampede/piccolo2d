// line 1 "src/main/ragel/CssParser.rl"
/*
 * Copyright (c) 2008, Piccolo2D project, http://piccolo2d.org
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of conditions
 * and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions
 * and the following disclaimer in the documentation and/or other materials provided with the
 * distribution.
 *
 * None of the name of the Piccolo2D project, the University of Maryland, or the names of its contributors
 * may be used to endorse or promote products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.piccolo2d.svg.cssmini;

import java.text.ParseException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;

import org.piccolo2d.svg.util.RagelParser;

/** <a href="http://research.cs.queensu.ca/~thurston/ragel/">Ragel</a> parser 
 * for <a href="http://www.w3.org/TR/CSS21/grammar.html">CSS</a> - This file is auto-generated by rl2java.sh.
 * <p>
 * DO NOT EDIT MANUALLY!!!
 * </p>
 * See Also:<ul>
 * <li>Another CSS Grammar: http://www.w3.org/TR/CSS21/syndata.html</li>
 * <li>A ragel css grammar: http://labs.ohloh.net/ohcount/browser/ext/ohcount_native/ragel_parsers/css.rl?rev=83e15c94ca8c53994ef07cdb6c7a5ceffe67884c</li>
 * </ul>
 */
class CssParser implements RagelParser {
// line 162 "src/main/ragel/CssParser.rl"



// line 54 "src/main/java/org/piccolo2d/svg/cssmini/CssParser.java"
private static byte[] init__css_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    4,    1,    5,    1,
	    9,    1,   10,    1,   11,    1,   12,    1,   14,    2,    3,    6,
	    2,    3,    8,    2,    7,    0,    2,    7,    2,    2,   13,    0,
	    2,   13,    2,    2,   13,   14,    3,    1,    3,    6,    3,    1,
	    3,    8,    3,    3,    7,    0,    3,    3,    7,    2,    3,    5,
	    3,    6,    3,    5,    3,    8,    4,    1,    3,    7,    2,    4,
	    5,    3,    7,    2
	};
}

private static final byte _css_actions[] = init__css_actions_0();


private static short[] init__css_key_offsets_0()
{
	return new short [] {
	    0,    0,   15,   25,   30,   47,   58,   72,   82,   87,  104,  115,
	  116,  117,  119,  130,  131,  132,  134,  139,  140,  141,  143,  160,
	  161,  162,  164,  169,  182,  187,  188,  189,  191,  195,  200,  206,
	  212,  219,  226,  232,  244,  245,  247,  261,  267,  268,  270,  271,
	  273,  279,  285,  292,  307,  322,  332,  338,  355,  366,  381,  395,
	  405,  411,  428,  445,  446,  448,  449,  451,  463,  480,  481,  483,
	  484,  486,  493,  510,  511,  513,  514,  516,  517,  518,  520,  530,
	  531,  532,  534,  545,  556,  566,  577,  589
	};
}

private static final short _css_key_offsets[] = init__css_key_offsets_0();


private static char[] init__css_trans_keys_0()
{
	return new char [] {
	   32,   42,   43,   44,   46,   47,   62,   95,  123,    9,   13,   65,
	   90,   97,  122,   32,   42,   46,   95,    9,   13,   65,   90,   97,
	  122,   95,   65,   90,   97,  122,   32,   42,   43,   44,   46,   47,
	   62,   95,  123,    9,   13,   45,   57,   65,   90,   97,  122,   32,
	   42,   46,   47,   95,    9,   13,   65,   90,   97,  122,   32,   42,
	   43,   44,   46,   62,   95,  123,    9,   13,   65,   90,   97,  122,
	   32,   42,   46,   95,    9,   13,   65,   90,   97,  122,   95,   65,
	   90,   97,  122,   32,   42,   43,   44,   45,   46,   62,   95,  123,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   47,   59,   95,
	  125,    9,   13,   65,   90,   97,  122,   42,   42,   42,   47,   32,
	   47,   59,   95,  125,    9,   13,   65,   90,   97,  122,   42,   42,
	   42,   47,   32,   59,  125,    9,   13,   42,   42,   42,   47,   32,
	   42,   43,   44,   46,   47,   62,   95,  123,    9,   13,   45,   57,
	   65,   90,   97,  122,   42,   42,   42,   47,   32,   44,  123,    9,
	   13,   32,   45,   47,   58,   95,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   47,   58,    9,   13,   42,   42,   42,   47,   32,
	   58,    9,   13,   32,   59,  125,    9,   13,   32,   47,   59,  125,
	    9,   13,   32,   47,   59,  125,    9,   13,   32,   42,   47,   59,
	  125,    9,   13,   32,   42,   47,   59,  125,    9,   13,   32,   42,
	   59,  125,    9,   13,   32,   42,   47,   59,   95,  125,    9,   13,
	   65,   90,   97,  122,   42,   42,   47,   32,   42,   45,   47,   58,
	   95,    9,   13,   48,   57,   65,   90,   97,  122,   32,   42,   47,
	   58,    9,   13,   42,   42,   47,   42,   42,   47,   32,   58,   59,
	  125,    9,   13,   32,   42,   59,  125,    9,   13,   32,   42,   47,
	   59,  125,    9,   13,   32,   42,   43,   44,   46,   47,   62,   95,
	  123,    9,   13,   65,   90,   97,  122,   32,   42,   43,   44,   46,
	   47,   62,   95,  123,    9,   13,   65,   90,   97,  122,   32,   42,
	   46,   95,    9,   13,   65,   90,   97,  122,   42,   95,   65,   90,
	   97,  122,   32,   42,   43,   44,   46,   47,   62,   95,  123,    9,
	   13,   45,   57,   65,   90,   97,  122,   32,   42,   46,   47,   95,
	    9,   13,   65,   90,   97,  122,   32,   42,   43,   44,   46,   47,
	   62,   95,  123,    9,   13,   65,   90,   97,  122,   32,   42,   43,
	   44,   46,   62,   95,  123,    9,   13,   65,   90,   97,  122,   32,
	   42,   46,   95,    9,   13,   65,   90,   97,  122,   42,   95,   65,
	   90,   97,  122,   32,   42,   43,   44,   45,   46,   62,   95,  123,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   42,   43,   44,
	   45,   46,   62,   95,  123,    9,   13,   48,   57,   65,   90,   97,
	  122,   42,   42,   47,   42,   42,   47,   32,   42,   46,   59,   95,
	  125,    9,   13,   65,   90,   97,  122,   32,   42,   43,   44,   45,
	   46,   62,   95,  123,    9,   13,   48,   57,   65,   90,   97,  122,
	   42,   42,   47,   42,   42,   47,   32,   44,   59,  123,  125,    9,
	   13,   32,   42,   43,   44,   46,   47,   62,   95,  123,    9,   13,
	   45,   57,   65,   90,   97,  122,   42,   42,   47,   42,   42,   47,
	   42,   42,   42,   47,   32,   42,   46,   95,    9,   13,   65,   90,
	   97,  122,   42,   42,   42,   47,   32,   42,   46,   47,   95,    9,
	   13,   65,   90,   97,  122,   32,   42,   46,   47,   95,    9,   13,
	   65,   90,   97,  122,   32,   42,   46,   95,    9,   13,   65,   90,
	   97,  122,   32,   42,   46,   47,   95,    9,   13,   65,   90,   97,
	  122,   32,   42,   46,   59,   95,  125,    9,   13,   65,   90,   97,
	  122,   32,   42,   46,   95,    9,   13,   65,   90,   97,  122,    0
	};
}

private static final char _css_trans_keys[] = init__css_trans_keys_0();


private static byte[] init__css_single_lengths_0()
{
	return new byte [] {
	    0,    9,    4,    1,    9,    5,    8,    4,    1,    9,    5,    1,
	    1,    2,    5,    1,    1,    2,    3,    1,    1,    2,    9,    1,
	    1,    2,    3,    5,    3,    1,    1,    2,    2,    3,    4,    4,
	    5,    5,    4,    6,    1,    2,    6,    4,    1,    2,    1,    2,
	    4,    4,    5,    9,    9,    4,    2,    9,    5,    9,    8,    4,
	    2,    9,    9,    1,    2,    1,    2,    6,    9,    1,    2,    1,
	    2,    5,    9,    1,    2,    1,    2,    1,    1,    2,    4,    1,
	    1,    2,    5,    5,    4,    5,    6,    4
	};
}

private static final byte _css_single_lengths[] = init__css_single_lengths_0();


private static byte[] init__css_range_lengths_0()
{
	return new byte [] {
	    0,    3,    3,    2,    4,    3,    3,    3,    2,    4,    3,    0,
	    0,    0,    3,    0,    0,    0,    1,    0,    0,    0,    4,    0,
	    0,    0,    1,    4,    1,    0,    0,    0,    1,    1,    1,    1,
	    1,    1,    1,    3,    0,    0,    4,    1,    0,    0,    0,    0,
	    1,    1,    1,    3,    3,    3,    2,    4,    3,    3,    3,    3,
	    2,    4,    4,    0,    0,    0,    0,    3,    4,    0,    0,    0,
	    0,    1,    4,    0,    0,    0,    0,    0,    0,    0,    3,    0,
	    0,    0,    3,    3,    3,    3,    3,    3
	};
}

private static final byte _css_range_lengths[] = init__css_range_lengths_0();


private static short[] init__css_index_offsets_0()
{
	return new short [] {
	    0,    0,   13,   21,   25,   39,   48,   60,   68,   72,   86,   95,
	   97,   99,  102,  111,  113,  115,  118,  123,  125,  127,  130,  144,
	  146,  148,  151,  156,  166,  171,  173,  175,  178,  182,  187,  193,
	  199,  206,  213,  219,  229,  231,  234,  245,  251,  253,  256,  258,
	  261,  267,  273,  280,  293,  306,  314,  319,  333,  342,  355,  367,
	  375,  380,  394,  408,  410,  413,  415,  418,  428,  442,  444,  447,
	  449,  452,  459,  473,  475,  478,  480,  483,  485,  487,  490,  498,
	  500,  502,  505,  514,  523,  531,  540,  550
	};
}

private static final short _css_index_offsets[] = init__css_index_offsets_0();


private static byte[] init__css_trans_targs_0()
{
	return new byte [] {
	    1,    1,    2,    5,    3,   23,    2,   22,   10,    1,   22,   22,
	    0,    2,    1,    3,   22,    2,   22,   22,    0,    4,    4,    4,
	    0,    1,    1,    2,    5,    3,   23,    2,    4,   10,    1,    4,
	    4,    4,    0,    5,    6,    8,   79,   68,    5,   68,   68,    0,
	    6,    6,    7,    5,    8,    7,   68,   10,    6,   68,   68,    0,
	    7,    6,    8,   68,    7,   68,   68,    0,    9,    9,    9,    0,
	    6,    6,    7,    5,    9,    8,    7,    9,   10,    6,    9,    9,
	    9,    0,   10,   11,   10,   27,   87,   10,   27,   27,    0,   12,
	    0,   13,   12,   13,   14,   12,   14,   15,   10,   27,   87,   14,
	   27,   27,    0,   16,    0,   17,   16,   17,   18,   16,   18,   10,
	   87,   18,    0,   20,    0,   21,   20,   21,   88,   20,    1,    1,
	    2,    5,    3,   23,    2,   22,   10,    1,   22,   22,   22,    0,
	   24,    0,   25,   24,   25,   26,   24,   26,    5,   10,   26,    0,
	   28,   27,   29,   33,   27,   28,   27,   27,   27,    0,   28,   29,
	   33,   28,    0,   30,    0,   31,   30,   31,   32,   30,   32,   33,
	   32,    0,   33,    0,    0,   33,   34,   35,   36,   10,   87,   35,
	   34,   35,   15,   10,   87,   35,    0,   35,   37,   36,   10,   87,
	   35,   34,   38,   50,   37,   39,   89,   38,   37,   38,   17,   39,
	   89,   38,   16,   39,   17,   40,   39,   42,   89,   39,   42,   42,
	   16,   41,   16,   13,   18,   12,   43,   17,   42,   44,   49,   42,
	   43,   42,   42,   42,   16,   43,   17,   44,   49,   43,   16,   45,
	   16,   47,   18,   46,   47,   46,   47,   48,   46,   48,   33,   10,
	   87,   48,    0,   49,   50,   16,   16,   49,   37,   38,   50,   18,
	   39,   89,   38,   37,   52,   51,   53,   56,   54,   18,   53,   74,
	   39,   52,   74,   74,   16,   52,   51,   53,   56,   54,   69,   53,
	   74,   39,   52,   74,   74,   16,   53,   51,   54,   74,   53,   74,
	   74,   16,   17,   55,   55,   55,   16,   52,   51,   53,   56,   54,
	   69,   53,   55,   39,   52,   55,   55,   55,   16,   56,   57,   60,
	   63,   62,   56,   62,   62,   16,   58,   57,   59,   56,   60,   18,
	   59,   62,   39,   58,   62,   62,   16,   58,   57,   59,   56,   60,
	   59,   62,   39,   58,   62,   62,   16,   59,   57,   60,   62,   59,
	   62,   62,   16,   17,   61,   61,   61,   16,   58,   57,   59,   56,
	   61,   60,   59,   61,   39,   58,   61,   61,   61,   16,   58,   57,
	   59,   56,   62,   60,   59,   62,   39,   58,   62,   62,   62,   16,
	   64,   16,   66,   18,   65,   66,   65,   66,   67,   65,   67,    6,
	    8,   10,   68,   87,   67,   68,   68,    0,    6,    6,    7,    5,
	   68,    8,    7,   68,   10,    6,   68,   68,   68,    0,   70,   16,
	   72,   18,   71,   72,   71,   72,   73,   71,   73,    5,   10,   10,
	   87,   73,    0,   52,   51,   53,   56,   54,   69,   53,   74,   39,
	   52,   74,   74,   74,   16,   76,   16,   78,   18,   77,   78,   77,
	   78,   90,   77,   80,    0,   81,   80,   81,   82,   80,   82,    6,
	    8,   68,   82,   68,   68,    0,   84,    0,   85,   84,   85,   91,
	   84,   86,    1,    3,   83,   22,   86,   22,   22,    0,   87,    1,
	    3,   19,   22,   87,   22,   22,    0,   88,    1,    3,   22,   88,
	   22,   22,    0,   89,   51,   54,   75,   74,   89,   74,   74,   16,
	   90,    1,    3,   10,   22,   87,   90,   22,   22,    0,   91,    1,
	    3,   22,   91,   22,   22,    0,    0
	};
}

private static final byte _css_trans_targs[] = init__css_trans_targs_0();


private static byte[] init__css_trans_actions_0()
{
	return new byte [] {
	    0,   54,   21,   24,    0,   24,   21,   50,   24,    0,   50,   50,
	    0,    0,   30,   30,   27,    0,   27,   27,    0,    7,    7,    7,
	    0,    9,   71,   58,   62,    9,   62,   58,    0,   62,    9,    0,
	    0,    0,    0,    0,    5,    5,    0,    1,    0,    1,    1,    0,
	    0,   54,   21,   24,    0,   21,   50,   24,    0,   50,   50,    0,
	    0,   30,   30,   27,    0,   27,   27,    0,    7,    7,    7,    0,
	    9,   71,   58,   62,    0,    9,   58,    0,   62,    9,    0,    0,
	    0,    0,    0,    0,    0,   11,    0,    0,   11,   11,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   11,    0,    0,
	   11,   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,   66,
	   42,   46,    3,   46,   42,    0,   46,    3,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   13,    0,   13,   13,    0,   13,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   15,   17,   17,   17,   17,   17,
	    0,    0,    0,    0,    0,    0,    0,   17,    0,   17,   17,   17,
	   17,    0,   17,    0,   17,   17,   17,   17,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   11,    0,    0,   11,   11,
	    0,    0,    0,    0,    0,    0,   13,    0,    0,   13,   13,    0,
	   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   15,    0,    0,    0,   15,   17,    0,    0,
	   17,   17,   17,    0,    0,   54,   21,   24,    0,    0,   21,   50,
	   24,    0,   50,   50,    0,    0,   54,   21,   24,    0,   24,   21,
	   50,   24,    0,   50,   50,    0,    0,   30,   30,   27,    0,   27,
	   27,    0,    0,    7,    7,    7,    0,    9,   71,   58,   62,    9,
	   62,   58,    0,   62,    9,    0,    0,    0,    0,    0,    5,    5,
	    0,    1,    0,    1,    1,    0,    0,   54,   21,   24,    0,    0,
	   21,   50,   24,    0,   50,   50,    0,    0,   54,   21,   24,    0,
	   21,   50,   24,    0,   50,   50,    0,    0,   30,   30,   27,    0,
	   27,   27,    0,    0,    7,    7,    7,    0,    9,   71,   58,   62,
	    0,    9,   58,    0,   62,    9,    0,    0,    0,    0,    3,   66,
	   42,   46,    0,    3,   42,    0,   46,    3,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    5,
	    5,    0,    1,    0,    0,    1,    1,    0,    3,   66,   42,   46,
	    0,    3,   42,    0,   46,    3,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    3,   66,   42,   46,    3,   46,   42,    0,   46,
	    3,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    5,
	    5,    1,    0,    1,    1,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    5,    5,    0,    1,    0,    1,    1,    0,    0,   36,
	   36,    0,   33,    0,   33,   33,    0,    0,   36,   36,   33,    0,
	   33,   33,    0,    0,   36,   36,    0,   33,    0,   33,   33,    0,
	    0,   36,   36,    0,   33,    0,    0,   33,   33,    0,    0,    5,
	    5,    1,    0,    1,    1,    0,    0
	};
}

private static final byte _css_trans_actions[] = init__css_trans_actions_0();


private static byte[] init__css_eof_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   19,   39,   39,   39,   39,   19
	};
}

private static final byte _css_eof_actions[] = init__css_eof_actions_0();


static final int css_start = 86;
static final int css_first_final = 86;
static final int css_error = 0;

static final int css_en_main = 86;

// line 165 "src/main/ragel/CssParser.rl"

    // Collection<CSSStyleRule>
    final Collection parse(final CharSequence data) throws ParseException {
        return parse(data.toString().toCharArray());
    }

    // Collection<CSSStyleRule>
    final Collection parse(final char[] data) throws ParseException {
		// high-level buffers
        final Collection css = new LinkedList();
        if(data == null)
        	return css;
        final Collection sel = new LinkedList();
        final CSSSelector.Builder sB = new CSSSelectorBuilderXPath();
        final CSSStyleDeclaration.Builder dB = new CSSStyleDeclaration.Builder();
        char combinator = ' ';
		int start = -1;
		
		final boolean debug = false;
		
		// ragel variables (low level)
		final int pe = data.length;
		final int eof = pe;
		int cs, p = 0;

		
// line 360 "src/main/java/org/piccolo2d/svg/cssmini/CssParser.java"
	{
	cs = css_start;
	}
// line 191 "src/main/ragel/CssParser.rl"
		
// line 366 "src/main/java/org/piccolo2d/svg/cssmini/CssParser.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _css_key_offsets[cs];
	_trans = _css_index_offsets[cs];
	_klen = _css_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _css_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _css_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _css_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _css_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _css_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	cs = _css_trans_targs[_trans];

	if ( _css_trans_actions[_trans] != 0 ) {
		_acts = _css_trans_actions[_trans];
		_nacts = (int) _css_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _css_actions[_acts++] )
			{
	case 0:
// line 56 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("start_element");
		start = p;
	}
	break;
	case 1:
// line 60 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("push_element [" + new String(data, start, p-start) + "]");
		sB.startElement(new String(data, start, p-start));
		start = -1;
	}
	break;
	case 2:
// line 65 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("push_wildcard");
		sB.startElement("*");
		start = -1;
	}
	break;
	case 3:
// line 70 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("end_element " + p);
		sB.endElement();
	}
	break;
	case 4:
// line 75 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("start_class");
		start = p;
	}
	break;
	case 5:
// line 79 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("push_class [" + new String(data, start, p-start) + "]");
		sB.addClass(new String(data, start, p-start));
		start = -1;
	}
	break;
	case 6:
// line 85 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("push_combinator [" + data[p] + "]");
		combinator = data[p];
	}
	break;
	case 7:
// line 89 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("combined");
		sB.combinator(combinator);
		combinator = ' ';
	}
	break;
	case 8:
// line 95 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("end_selector [" + p + "] ");
		sel.add(sB.finish());
	}
	break;
	case 9:
// line 100 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("start_prop_key");
		start = p;
	}
	break;
	case 10:
// line 104 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("push_prop_key [" + new String(data, start, p-start) + "]");
		dB.addKey(new String(data, start, p-start));
		start = -1;
	}
	break;
	case 11:
// line 110 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("start_prop_value");
		start = p;
	}
	break;
	case 12:
// line 114 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("push_prop_value [" + new String(data, start, p-start) + "]");
		dB.addValue(new String(data, start, p-start));
		start = -1;
	}
	break;
	case 13:
// line 120 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("end_definition");
		final CSSStyleDeclaration s = dB.finish();
		for(Iterator it = sel.iterator(); it.hasNext();) {
			css.add(new CSSStyleRule((CSSSelector) it.next(), s));
		}
		sel.clear();
	}
	break;
// line 553 "src/main/java/org/piccolo2d/svg/cssmini/CssParser.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _css_eof_actions[cs];
	int __nacts = (int) _css_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _css_actions[__acts++] ) {
	case 13:
// line 120 "src/main/ragel/CssParser.rl"
	{
		if(debug) System.out.println("end_definition");
		final CSSStyleDeclaration s = dB.finish();
		for(Iterator it = sel.iterator(); it.hasNext();) {
			css.add(new CSSStyleRule((CSSSelector) it.next(), s));
		}
		sel.clear();
	}
	break;
	case 14:
// line 161 "src/main/ragel/CssParser.rl"
	{if(debug) System.out.println("---");}
	break;
// line 589 "src/main/java/org/piccolo2d/svg/cssmini/CssParser.java"
		}
	}
	}

case 5:
	}
	break; }
	}
// line 192 "src/main/ragel/CssParser.rl"

		if ( cs < css_first_final )
			throw new ParseException(new String(data), p);
        return css;
	}
}
