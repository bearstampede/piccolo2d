/*
 * Copyright (c) 2008, Piccolo2D project, http://piccolo2d.org
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of conditions
 * and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions
 * and the following disclaimer in the documentation and/or other materials provided with the
 * distribution.
 *
 * None of the name of the Piccolo2D project, the University of Maryland, or the names of its contributors
 * may be used to endorse or promote products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.piccolo2d.svg;

import java.awt.Shape;
import java.awt.geom.GeneralPath;
import java.text.ParseException;

/** <a href="http://research.cs.queensu.ca/~thurston/ragel/">Ragel> parser 
 * for <a href="http://www.w3.org/TR/SVG11/paths.html#PathDataBNF">paths</a> - This file is auto-generated by rl2java.sh.
 * <p>
 * DO NOT EDIT MANUALLY!!!
 * </p>
 */
class PathParser extends PathParserBase {
%%{

	machine path;

	#######################################################
	## Define the actions
	#######################################################

	action BUF {
		/* add the character to the buffer. */
		buf.append(data[p]);
	}
	action NUM {
		/* parse the buffer. */		
		argv[argc++] = Double.parseDouble(buf.toString());
		buf.setLength(0);
	}
	action ABS {
		absolute = data[p] > 'z';
	}
	action CLEAR {
		argc = 0;
	}
	action CLOSE {
		System.out.println("close.");		
	}
	action MOVETO {
		System.out.println("MoveTo x=" + argv[0] + " y=" + argv[1]);		
	}
	action LINETO {
		System.out.println("LineTo x=" + argv[0] + " y=" + argv[1]);		
	}
	action HLINETO {
		System.out.println("hline: TODO");		
	}
	action VLINETO {
		System.out.println("vline: TODO");		
	}
	action CUBICTO {
		System.out.println("CubicTo x0=" + argv[0] + " y0=" + argv[1]+" x1=" + argv[2] + " y1=" + argv[3]+" x2=" + argv[4] + " y2=" + argv[5]);		
	}
	action SCUBICTO {
		System.out.println("smooth cubic: TODO");		
	}
	action QUADTO {
		System.out.println("QuadTo x0=" + argv[0] + " y0=" + argv[1]+" x1=" + argv[2] + " y1=" + argv[3]);		
	}
	action SQUADTO {
		System.out.println("smooth quadratic: TODO");		
	}
	action ARC {
		System.out.println("arc: TODO");		
	}

	#######################################################
	## Define the grammar
	#######################################################

	digit_sequence = (digit @BUF )+;
	sign = ('+' | '-') @BUF;
	dot = '.' @BUF;
	exponent = ( 'e' | 'E' ) @BUF sign? digit_sequence;
	fractional_constant = 
	    digit_sequence? dot digit_sequence
	    | digit_sequence dot;
	floating_point_constant = 
	    fractional_constant exponent?
	    | digit_sequence exponent;
	integer_constant = 
	    digit_sequence;
	comma = 
	    ',';
	comma_wsp = 
	    (space+ comma? space*) | (comma space*);
	flag = 
	    ('0' | '1') @BUF %NUM;
	number = 
	    (sign? integer_constant
	    | sign? floating_point_constant) %NUM;
	nonnegative_number = 
	    (integer_constant
	    | floating_point_constant) %NUM;
	coordinate = 
	    number;
	coordinate_pair = 
	    coordinate comma_wsp coordinate;
	    
	elliptical_arc_argument = 
	    nonnegative_number comma_wsp nonnegative_number comma_wsp 
	        number comma_wsp flag comma_wsp flag comma_wsp coordinate_pair >CLEAR %ARC;
	elliptical_arc_argument_sequence = 
	    elliptical_arc_argument (comma_wsp elliptical_arc_argument)*;
	elliptical_arc = 
	    ( 'A' | 'a' ) @ABS space* elliptical_arc_argument_sequence;
	    
	smooth_quadratic_bezier_curveto_argument = 
	    coordinate_pair >CLEAR %SQUADTO;
	smooth_quadratic_bezier_curveto_argument_sequence = 
	    smooth_quadratic_bezier_curveto_argument (comma_wsp smooth_quadratic_bezier_curveto_argument)*;
	smooth_quadratic_bezier_curveto = 
	    ( 'T' | 't' ) @ABS space* smooth_quadratic_bezier_curveto_argument_sequence;
	    
	quadratic_bezier_curveto_argument = 
	    coordinate_pair comma_wsp coordinate_pair >CLEAR %QUADTO;
	quadratic_bezier_curveto_argument_sequence = 
	    quadratic_bezier_curveto_argument (comma_wsp quadratic_bezier_curveto_argument)*;
	quadratic_bezier_curveto = 
	    ( 'Q' | 'q' ) @ABS space* quadratic_bezier_curveto_argument_sequence;
	    
	smooth_curveto_argument = 
	    coordinate_pair comma_wsp coordinate_pair >CLEAR %SCUBICTO;
	smooth_curveto_argument_sequence = 
	    smooth_curveto_argument (comma_wsp smooth_curveto_argument)*;
	smooth_curveto = 
	    ( 'S' | 's' ) @ABS space* smooth_curveto_argument_sequence;
	    
	curveto_argument = 
	    coordinate_pair comma_wsp coordinate_pair comma_wsp coordinate_pair >CLEAR %CUBICTO;
	curveto_argument_sequence = 
	    curveto_argument (comma_wsp curveto_argument)*;
	curveto = 
	    ( 'C' | 'c' ) @ABS space* curveto_argument_sequence;
	    
	vertical_lineto_argument = coordinate >CLEAR %VLINETO;
	vertical_lineto_argument_sequence = 
	    vertical_lineto_argument (comma_wsp vertical_lineto_argument)*;
	vertical_lineto = 
	    ( 'V' | 'v' ) space* vertical_lineto_argument_sequence;
	    
	horizontal_lineto_argument = coordinate >CLEAR %HLINETO;
	horizontal_lineto_argument_sequence = 
	    horizontal_lineto_argument (comma_wsp horizontal_lineto_argument)*;
	horizontal_lineto = 
	    ( 'H' | 'h' ) space* horizontal_lineto_argument_sequence;
	    
	lineto_argument = coordinate_pair >CLEAR %LINETO;
	lineto_argument_sequence = 
	    lineto_argument (comma_wsp lineto_argument)*;
	lineto = 
	    ( 'L' | 'l' ) @ABS space* lineto_argument_sequence;
	    
	closepath = 
	    ('Z' | 'z') @CLOSE;
	    
	moveto_argument = coordinate_pair >CLEAR %MOVETO;
	moveto = 
	    ( 'M' | 'm' ) @ABS space* moveto_argument (comma_wsp lineto_argument)*;
	    
	drawto_command = 
	    closepath
	    | lineto
	    | horizontal_lineto
	    | vertical_lineto
	    | curveto
	    | smooth_curveto
	    | quadratic_bezier_curveto
	    | smooth_quadratic_bezier_curveto
	    | elliptical_arc;
	drawto_commands = 
	    (drawto_command space*)* drawto_command;
	moveto_drawto_command_group = 
	    moveto space* drawto_commands?;
	moveto_drawto_command_groups = 
	    (moveto_drawto_command_group space*)* moveto_drawto_command_group;
	svg_path = space* moveto_drawto_command_groups space*;
	
	main := svg_path;
}%%

%% write data;

	final Shape parse(final CharSequence data) throws ParseException {
		return parse(data.toString().toCharArray());
	}

	final Shape parse(final char[] data) throws ParseException {
		// high-level buffers
		final StringBuilder buf = new StringBuilder();
		final double[] argv = new double[7];
		int argc = 0;
		boolean absolute = true;
		
		// ragel variables (low level)
		final int pe = data.length;
		final int eof = pe;
		int cs, p = 0;
		int top;

		%% write init;
		%% write exec;

		if ( cs < path_first_final )
			throw new ParseException(new String(data), p);
        return new GeneralPath();
	}
}
