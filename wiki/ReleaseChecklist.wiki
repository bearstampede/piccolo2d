#summary Release checklist.

= Checklist =
===Verify Issues===
  # Verify that no Open issues exist with current release milestone:
    * [http://code.google.com/p/piccolo2d/issues/list?can=2&q=milestone=1.3.1&colspec=ID%20Type%20Status%20Priority%20Milestone%20Owner%20Toolkit%20Component%20Summary Milestone:1.3.1,Open issues]
  # Verify that no Fixed issues exist with the current release milestone
    * (All closed issues should be in Duplicate, WontFix, or Verified status
    * [http://code.google.com/p/piccolo2d/issues/list?can=1&q=Milestone:1.3.1%20status=Fixed&sort=status&colspec=ID%20Type%20Status%20Priority%20Milestone%20Owner%20Toolkit%20Component%20Summary Milestone:1.3.1,status=Fixed]
===Release Candidates===
  * For each of {beta, rc1, rc2, ...} release candidates:
    # Clean checkout of trunk (or primary branch) from subversion:
{{{
$ svn checkout https://piccolo2d.googlecode.com/svn/piccolo2d.java/trunk piccolo2d.java-trunk
$ cd piccolo2d.java-trunk
}}}
    # Update version in all pom.xml files to {$version}-${release-candidate}
      * `*`/pom.xml:
{{{
  <version>1.3.1-rc1</version>
}}}
    # Verify that working directory builds and all tests pass on all platforms:
{{{
$ mvn install
}}}
    # Verify that the examples run with jdk 1.4+ on all platforms
{{{
$ cd examples
$ mvn assembly:assembly
$ java -jar target/piccolo2d-examples-1.3.1-rc1-jar-with-dependencies.jar
}}}
      * _Note: The maven assembly plugin is deprecating (see [http://maven.apache.org/plugins/maven-assembly-plugin/plugin-info.html here]) all goals (including assembly:assembly) except for assembly:single. However, mvn assembly:single currently fails to correctly build the assembly; likely having something to do with [http://jira.codehaus.org/browse/MASSEMBLY-94 this Maven ticket]. The workaround is to use run the clean and package phase at the same time as assembly:single (i.e., {{{mvn clean package assembly:single"}}}) or use mvn assembly:assembly so long as it is still available._
    # Verify that the SWT examples run with jdk 1.4+ on all platforms
{{{
$ cd ../swt-examples
$ mvn assembly:assembly
$ java -jar target/piccolo2d-swt-examples-1.3.1-beta-jar-with-dependencies.jar
}}}
    # Verify that {{{clirr}}} report shows no ERRORs where binary compatibility is required
      * For example, for minor release version 1.3.1, core must be binary compatible with the latest minor release version, 1.3.
{{{
$ clirr.sh --old-version piccolo2d-core-1.3.jar --new-version piccolo2d-core-1.3.1-rc1.jar --style text
}}}
    # Verify that all source files have the Piccolo2D license header
    # Class file format of all jar files matches the minimum required JDK version, currently 1.4
      * _Note: I did this by unzipping the built jars and using {{{javap}}}; there may be a better way to do this verification, or perhaps we should author a script._
    # Update release notes and readme as necessary
    # Commit release candidate changes to trunk
{{{
$ svn commit -m "updating version to 1.3.1-rc1" .
}}}
    # Create release tag in subversion
{{{
$ svn cp -m "creating 1.3.1-rc1 release tag" https://piccolo2d.googlecode.com/svn/piccolo2d.java/trunk https://piccolo2d.googlecode.com/svn/piccolo2d.java/tags/release-1.3.1-rc1
}}}
    # Create binary, source, and javadoc release artifacts
      * To create binary zip and binary tar.gz files, update the VERSION shell variable and call
{{{
$ ./create-bin.sh
}}}
      * To create source zip and source tar.gz files, update the VERSION shell variable and call
{{{
$ ./create-src.sh
}}}
        * These scripts are currently attached to Issue 146 and will probably live in svn shortly.
    # Create new downloads on Google Code
      * Visit http://code.google.com/p/piccolo2d/downloads/list
      * Click [http://code.google.com/p/piccolo2d/downloads/entry New download] link and upload binary zip, binary tar.gz, source zip, and source tar.gz files. Refer to previous uploads for what the metadata should look like.
      * Deprecate earlier failed release candidate version downloads, if any.
    # Consider syncing release candidates to Maven Repository (follow same process as for a release, below) to encourage community usage of release candidates.

====For release candidate versions====

Send a VOTE email to the dev and user mailing lists,
{{{
Subject: [VOTE] Release Piccolo2D.Java ${version}

This is a vote for releasing Piccolo2D.Java ${version} based on release
candidate ${rc} (version ${rc-version}).

${rc-version} is available from the downloads page:

http://code.google.com/p/piccolo2d/downloads/list?can=2&q=${rc-version}

---------------
[ ] +1  I support this release
[ ] +0
[ ] -0
[ ] -1  I oppose this release because...
----------------

Votes from Piccolo2D project committers are binding, however votes
from other contributors and users are welcomed.  The vote must receive
at least three +1 binding votes and no -1 binding votes.

Vote will close at ${date}.

On behalf of the Piccolo2D developers,

  ${developer}
}}}

After the vote is complete, send a RESULT email to the dev and user mailing lists,

{{{
Subject: [RESULT] Release Piccolo2D.Java ${version}

The following people voted on release ${rc-version}:

Bob +1
Sue +1
Sam +0
Sandy +1 (non-binding)
}}}

===After final release tag:===

  * Create release branch in subversion
{{{
$ svn cp -m "creating 1.3.1 release branch" https://piccolo2d.googlecode.com/svn/piccolo2d.java/trunk https://piccolo2d.googlecode.com/svn/piccolo2d.java/branches/release-1.3.1
}}}
  * Create bundle(s) for upload to maven central repository
    * First, if you don't already have one, you'll need a PGP code signing key available from the MIT keyserver, see: [http://code.google.com/p/piccolo2d/wiki/OpenPGPConfiguration OpenPGPConfiguration]. You'll also need to sign up for an account with [https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-2.Signup Sonatype] in order to stage artifacts that will be synced to Maven Central.
    * The [https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide Sonatype OSS Guide] describes the full process of syncing open-source artifacts to the Maven central repository.
      * See the section on [https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-7b.StageExistingArtifacts staging existing artifacts]. This is the easiest way to control the process; we've been wary to trust {{{mvn release}}} to perform the pom modifications and svn operations.
        * If building and staging the artifacts by hand, for each module use 
{{{
mvn source:jar javadoc:jar gpg:sign
}}} 
          which will produced signed versions of source, javadoc and binaries in the target directory. Example: 
{{{
$ cd core
$ mvn source:jar javadoc:jar gpg:sign
$ cd target
$ jar -cvf bundle.jar *.pom *.jar *.asc
}}}
          * Then manually stage/upload the bundle.jar through Nexus Sonatype UI.
        * More about signing artifacts with Maven GPG can be found [https://docs.sonatype.org/display/Repository/How+To+Generate+PGP+Signatures+With+Maven here].

  * Update version in parent pom.xml file on svn trunk to ${next-version}-SNAPSHOT
parent/pom.xml:
{{{
  <version>1.4-SNAPSHOT</version>
}}}

and commit
{{{
$ svn commit -m "updating version to 1.4-SNAPSHOT" parent/pom.xml
}}}

===Update the website, wiki, and announce the release===

*TODO*
http://code.google.com/p/piccolo2d/wiki/WebSiteHowTo
http://code.google.com/p/piccolo2d/issues/detail?id=42

= References =

 * Apache Commons [http://commons.apache.org/releases/prepare.html Preparations for a Release]
 * Apache Commons [http://commons.apache.org/releases/release.html Cutting the Release]
 * Apache Commons commons-parent [http://svn.apache.org/viewvc/commons/proper/commons-parent/trunk/pom.xml?view=annotate pom.xml]
 * Maven [http://maven.apache.org/plugins/maven-release-plugin/ Release Plugin]