#summary Rough Paper: History, Requirements, Concepts, Obstacles
#labels Phase-Requirements

This idea came up on the [http://groups.google.com/group/piccolo2d-dev/browse_thread/thread/df17f5cb0edfefe8 piccolo2d-dev maillist].

TODO: insert the [http://groups.google.com/group/piccolo2d-dev/browse_thread/thread/eab6481afdb09d3b options Michael mentioned] and the example from the comment below.

See also issue#61

= Motivation =
Piccolo2d is a scenegraph ZUI toolkit, [http://en.wikipedia.org/wiki/Scalable_Vector_Graphics svg] is a 2d vector graphics description language. Both share the idea of a scene graph and the grouping and transformation concepts also look similar at a first glance.

Is it possible to use svg documents e.g. generated by [http://www.inkscape.org/ inkscape] as input and convert them to piccolo2d scenegraphs?

= History =

There was some idea to build svg support into [http://www.cs.umd.edu/hcil/jazz/download/index.shtml jazz]. The [http://www.piccolo2d.org/doc/jazz/release-1.1/apidocs/index.html v1.1 API] has some svg classes.

= Requirements =

 * parse svg xml (e.g. using the super-lightweight [http://repo1.maven.org/maven2/xpp3/xpp3/1.1.3.3_min/ XPP3 min] xml pull parser).
 * parse css and build up a hierarchy.
 * parse svg paths and convert to generalpaths (shapes)
 * look up nodes in a piccolo2d scenegraph according to their ID (tree search)

= Concepts =

 * keep it as lean as possible (<100K ?)
 * do NOT add any new runtime/build requirements
 * use a factory/strategy to parse the svg input
 * add a css manager class
 * create a scenegraph ([http://www.piccolo2d.org/doc/piccolo2d.java/release-1.2.1/apidocs/edu/umd/cs/piccolo/PNode.html PNode]) using out-of-the-box [http://www.piccolo2d.org/doc/piccolo2d.java/release-1.2.1/apidocs/edu/umd/cs/piccolo/PNode.html PNode], [http://www.piccolo2d.org/doc/piccolo2d.java/release-1.2.1/apidocs/edu/umd/cs/piccolo/PPath.html PPath], [http://www.piccolo2d.org/doc/piccolo2d.java/release-1.2.1/apidocs/edu/umd/cs/piccolo/PText.html PText], [http://www.piccolo2d.org/doc/piccolo2d.java/release-1.2.1/apidocs/edu/umd/cs/piccolo/PImage.html PImage] classes
 * attach node id, css classes etc. as attributes.

= Steps =
Aim for for [http://www.w3.org/TR/SVGMobile/#sec-overview SVG 1.1 Tiny] and use the examples from the specification as test input. Development happens in the [http://piccolo2d.googlecode.com/svn/piccolo2d.java/branches/svg svg branch].

As I develop this in a local git repo and merge to svn, a fineer-grained commit history can be obtained from the [http://www.mro.name/piccolo2d.java.git git repository].

 # Proof a concept
  # Sax Parser to read the svg xml
  # The following [http://www.w3.org/TR/SVG11/shapes.html Basic Shapes] with styling via attributes (no CSS, no "style" attribute)
   # [http://www.w3.org/TR/SVG11/shapes.html#RectElement <rect />]
   # [http://www.w3.org/TR/SVG11/shapes.html#CircleElement <circle />]
 # CSS, step I:
  # [http://www.w3.org/TR/SVG11/styling.html#StyleAttribute "style" attribute]
 # Complete the basic shape module
   # [http://www.w3.org/TR/SVG11/shapes.html#EllipseElement <ellipse />]
   # [http://www.w3.org/TR/SVG11/shapes.html#LineElement <line />]
   # [http://www.w3.org/TR/SVG11/shapes.html#PolylineElement <polyline />]
   # [http://www.w3.org/TR/SVG11/shapes.html#PolygonElement <polygon />]
   # [http://www.w3.org/TR/SVG11/paths.html#PathElement <path />] without [http://www.w3.org/TR/SVG11/paths.html#PathDataEllipticalArcCommands elliptical arcs]
 # CSS, step II:
  # [http://www.w3.org/TR/SVG11/styling.html#StyleElement "style" element]
 # [http://www.w3.org/TR/SVG11/struct.html#UseElement <use />] Element
 # [http://www.w3.org/TR/SVG11/text.html#basic-text-mod Basic Text]
 # [http://www.w3.org/TR/SVG11/struct.html#ImageElement Images]
 # evtl. [http://www.w3.org/TR/SVG11/fonts.html#basic-font-mod Basic Font]

= Obstacles =

 * css parsing: more than rudimentary support is a terrible lot of code. See http://www.w3.org/Style/CSS/SAC/, http://cssparser.sourceforge.net/ and http://today.java.net/pub/a/today/2003/10/14/swingcss.html 
 * the "path" element arcs require complex code. See [http://xmlgraphics.apache.org/batik/javadoc/org/apache/batik/ext/awt/geom/ExtendedGeneralPath.html Batik ExtendedGeneralPath]
 * the "use" element requires cloning and re-application of the CSS on every node. The PNode.clone() implementation is rather slow.
 * the "text" element will be only rudimentary (no text along a path, rotated glyphs etc.)
 * graceful failure for unexpected svg features?
 * fatal failure for invalid svg (validating parser?)

= Links =
 * http://www.elementengine.com/